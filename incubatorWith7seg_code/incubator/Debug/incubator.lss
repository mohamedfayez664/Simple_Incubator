
incubator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002bfe  00002c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080017a  0080017a  00002dac  2**0
                  ALLOC
  3 .stab         00003480  00000000  00000000  00002dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017fa  00000000  00000000  0000622c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00007a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00007c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00007e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000a6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000bcf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000d0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000d5df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e035  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__vector_1>
       8:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 12 	call	0x24aa	; 0x24aa <main>
      8a:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ed 58       	subi	r30, 0x8D	; 141
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <actuaters_init>:
#include "actuators.h"

void actuaters_init()
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	DDRC|=(1<<PC5)|(1<<PC6)|(1<<PC7);
     f52:	a4 e3       	ldi	r26, 0x34	; 52
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e4 e3       	ldi	r30, 0x34	; 52
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 6e       	ori	r24, 0xE0	; 224
     f5e:	8c 93       	st	X, r24
	PORTC&=~((1<<PC5)|(1<<PC6)|(1<<PC7));  //initial 0 as out
     f60:	a5 e3       	ldi	r26, 0x35	; 53
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e3       	ldi	r30, 0x35	; 53
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 71       	andi	r24, 0x1F	; 31
     f6c:	8c 93       	st	X, r24
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <fan_on>:
void fan_on()
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
	PORTC|=(1<<PC5);
     f7c:	a5 e3       	ldi	r26, 0x35	; 53
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e5 e3       	ldi	r30, 0x35	; 53
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 62       	ori	r24, 0x20	; 32
     f88:	8c 93       	st	X, r24
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <fan_off>:
void fan_off()
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	PORTC&=~(1<<PC5);
     f98:	a5 e3       	ldi	r26, 0x35	; 53
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e3       	ldi	r30, 0x35	; 53
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8f 7d       	andi	r24, 0xDF	; 223
     fa4:	8c 93       	st	X, r24
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <heater_on>:
/////////////////////////////////////////////////////////////////////////
void heater_on()
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	PORTC|=(1<<PC6);
     fb4:	a5 e3       	ldi	r26, 0x35	; 53
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e5 e3       	ldi	r30, 0x35	; 53
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	8c 93       	st	X, r24
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <heater_off>:
void heater_off()
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	PORTC&=~(1<<PC6);
     fd0:	a5 e3       	ldi	r26, 0x35	; 53
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e3       	ldi	r30, 0x35	; 53
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 7b       	andi	r24, 0xBF	; 191
     fdc:	8c 93       	st	X, r24
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <buzzer_on>:
//////////////////////////////////////////////////////////////////////////////
void buzzer_on()
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	PORTC|=(1<<PC7);
     fec:	a5 e3       	ldi	r26, 0x35	; 53
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e3       	ldi	r30, 0x35	; 53
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 68       	ori	r24, 0x80	; 128
     ff8:	8c 93       	st	X, r24
}
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <buzzer_off>:
void buzzer_off()
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	PORTC&=~(1<<PC7);
    1008:	a5 e3       	ldi	r26, 0x35	; 53
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e5 e3       	ldi	r30, 0x35	; 53
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8f 77       	andi	r24, 0x7F	; 127
    1014:	8c 93       	st	X, r24
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(ADC_ConfigType * Config_Ptr)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <ADC_init+0x6>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 (bit7,6)= to choose reference voltage 
	 * ADLAR   (bit 5) = 0 right adjusted
	 * MUX4:0  (bit4:0)= 0 to choose channel 0 as initialization
	 */
	ADMUX = ( (Config_Ptr->referece) & 0X03)<<5 ;
    102a:	a7 e2       	ldi	r26, 0x27	; 39
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e9 81       	ldd	r30, Y+1	; 0x01
    1030:	fa 81       	ldd	r31, Y+2	; 0x02
    1032:	80 81       	ld	r24, Z
    1034:	83 70       	andi	r24, 0x03	; 3
    1036:	82 95       	swap	r24
    1038:	88 0f       	add	r24, r24
    103a:	80 7e       	andi	r24, 0xE0	; 224
    103c:	8c 93       	st	X, r24
	 * ADEN    (bit7)= 1 Enable ADC
	 * ADIE    (bit3)= 0 Disable ADC Interrupt
	 * ADPS2:0 (bit2:0)= to choose ADC_Clock=F_CPU/divasion_fac
     *         --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | ( (Config_Ptr->divasion_fac) & 0X07);
    103e:	a6 e2       	ldi	r26, 0x26	; 38
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	81 81       	ldd	r24, Z+1	; 0x01
    1048:	87 70       	andi	r24, 0x07	; 7
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	8c 93       	st	X, r24
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
	/* channel number must be from 0 --> 7
	 * clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel
	 * choose the correct channel by setting the channel number in MUX4:0 bits
	 */
	ADMUX= (ADMUX & 0XE0) | (channel_num & 0X07);
    1064:	a7 e2       	ldi	r26, 0x27	; 39
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e7 e2       	ldi	r30, 0x27	; 39
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	98 2f       	mov	r25, r24
    1070:	90 7e       	andi	r25, 0xE0	; 224
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	87 70       	andi	r24, 0x07	; 7
    1076:	89 2b       	or	r24, r25
    1078:	8c 93       	st	X, r24
	
	/* start conversion write '1' to ADSC 
     * clear ADIF by write '1' to it that make flag = 0 
	 */
	ADCSRA|=(1<<ADSC) | (1<<ADIF);    
    107a:	a6 e2       	ldi	r26, 0x26	; 38
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e6 e2       	ldi	r30, 0x26	; 38
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	80 65       	ori	r24, 0x50	; 80
    1086:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    1088:	e6 e2       	ldi	r30, 0x26	; 38
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	80 71       	andi	r24, 0x10	; 16
    1094:	90 70       	andi	r25, 0x00	; 0
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	b9 f3       	breq	.-18     	; 0x1088 <ADC_readChannel+0x30>
	return ADC;                       /* return the data register */
    109a:	e4 e2       	ldi	r30, 0x24	; 36
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	91 81       	ldd	r25, Z+1	; 0x01
}
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <DELAY_init>:
#define F_CPU_Pre F_CPU_64
#endif


/////////////////////////
void DELAY_init (){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
	////timer2 init
	TCNT2=0;              //initial
    10b2:	e4 e4       	ldi	r30, 0x44	; 68
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	10 82       	st	Z, r1
	OCR2 =125 ;           //initial compare value 
    10b8:	e3 e4       	ldi	r30, 0x43	; 67
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	8d e7       	ldi	r24, 0x7D	; 125
    10be:	80 83       	st	Z, r24
	//>>for f_cpu 1 and 8 M  ,,,pre_scaler 8 and in mili seconds
	//it will over every 1 mili_second>>(1/1M/pre) >>8 usec per every count
	//>>> com = 1000/8 -> 125 >>    8usec * 125 =1000 usec

	TCCR2 = (1<<FOC2) | (1<<WGM21);  //clock is zero to make timer un_active
    10c0:	e5 e4       	ldi	r30, 0x45	; 69
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	88 e8       	ldi	r24, 0x88	; 136
    10c6:	80 83       	st	Z, r24
}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <DELAY_ms>:

void DELAY_ms   (uint16 number_of_ms){
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <DELAY_ms+0x6>
    10d4:	0f 92       	push	r0
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01

	if(number_of_ms >0 ){
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	89 f1       	breq	.+98     	; 0x1148 <DELAY_ms+0x7a>
		TCCR2 =(TCCR2 & 0xf8) | (F_CPU_Pre & 0x07); //to run timer enter clock(2for 1M ,3 to 8M)
    10e6:	a5 e4       	ldi	r26, 0x45	; 69
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e4       	ldi	r30, 0x45	; 69
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	88 7f       	andi	r24, 0xF8	; 248
    10f2:	83 60       	ori	r24, 0x03	; 3
    10f4:	8c 93       	st	X, r24
    10f6:	0f c0       	rjmp	.+30     	; 0x1116 <DELAY_ms+0x48>
		                                            // tcnt2 = 0 ;;;;;;

		while (number_of_ms--){

			while(BIT_IS_CLEAR(TIFR,OCF2) );
    10f8:	e8 e5       	ldi	r30, 0x58	; 88
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 23       	and	r24, r24
    1100:	dc f7       	brge	.-10     	; 0x10f8 <DELAY_ms+0x2a>
			SET_BIT(TIFR,OCF2) ;      //to make it = 0 again
    1102:	a8 e5       	ldi	r26, 0x58	; 88
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e8 e5       	ldi	r30, 0x58	; 88
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 68       	ori	r24, 0x80	; 128
    110e:	8c 93       	st	X, r24
			TCNT2 = 0;         //to clear timer
    1110:	e4 e4       	ldi	r30, 0x44	; 68
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	10 82       	st	Z, r1

	if(number_of_ms >0 ){
		TCCR2 =(TCCR2 & 0xf8) | (F_CPU_Pre & 0x07); //to run timer enter clock(2for 1M ,3 to 8M)
		                                            // tcnt2 = 0 ;;;;;;

		while (number_of_ms--){
    1116:	1b 82       	std	Y+3, r1	; 0x03
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	11 f0       	breq	.+4      	; 0x1124 <DELAY_ms+0x56>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	8b 83       	std	Y+3, r24	; 0x03
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	11 f7       	brne	.-60     	; 0x10f8 <DELAY_ms+0x2a>
			while(BIT_IS_CLEAR(TIFR,OCF2) );
			SET_BIT(TIFR,OCF2) ;      //to make it = 0 again
			TCNT2 = 0;         //to clear timer
		}

		TCCR2&=~0x07;      //to turn timer off >> clear clock
    1134:	a5 e4       	ldi	r26, 0x45	; 69
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e4       	ldi	r30, 0x45	; 69
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	88 7f       	andi	r24, 0xF8	; 248
    1140:	8c 93       	st	X, r24
		TCNT2 = 0;         //to clear timer
    1142:	e4 e4       	ldi	r30, 0x44	; 68
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	10 82       	st	Z, r1
	}
} 
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <DELAY_sec>:


void DELAY_sec  (uint16 number_of_sec){
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <DELAY_sec+0x6>
    115a:	0f 92       	push	r0
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01

	if(number_of_sec > 0 ){
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	a1 f0       	breq	.+40     	; 0x1194 <DELAY_sec+0x40>
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <DELAY_sec+0x22>
		while (number_of_sec--)
			DELAY_ms   (1000);
    116e:	88 ee       	ldi	r24, 0xE8	; 232
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>


void DELAY_sec  (uint16 number_of_sec){

	if(number_of_sec > 0 ){
		while (number_of_sec--)
    1176:	1b 82       	std	Y+3, r1	; 0x03
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	11 f0       	breq	.+4      	; 0x1184 <DELAY_sec+0x30>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 23       	and	r24, r24
    1192:	69 f7       	brne	.-38     	; 0x116e <DELAY_sec+0x1a>
			DELAY_ms   (1000);
	}
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <dht_getdata>:
 * get data from sensor
 */
#if DHT_FLOAT == 1
int8_t dht_getdata(float *temperature, float *humidity) {
#elif DHT_FLOAT == 0
	int8_t dht_getdata(int8_t *temperature, int8_t *humidity) {
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	ab 97       	sbiw	r28, 0x2b	; 43
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	98 a7       	std	Y+40, r25	; 0x28
    11b6:	8f a3       	std	Y+39, r24	; 0x27
    11b8:	7a a7       	std	Y+42, r23	; 0x2a
    11ba:	69 a7       	std	Y+41, r22	; 0x29
#endif
		uint8_t bits[5];
		uint8_t i,j = 0;
    11bc:	18 a2       	std	Y+32, r1	; 0x20

		memset(bits, 0, sizeof(bits));
    11be:	ce 01       	movw	r24, r28
    11c0:	82 96       	adiw	r24, 0x22	; 34
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	45 e0       	ldi	r20, 0x05	; 5
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	0e 94 f6 15 	call	0x2bec	; 0x2bec <memset>

		//reset port
		DHT_DDR |=  (1<<DHT_INPUTPIN); //output
    11ce:	a1 e3       	ldi	r26, 0x31	; 49
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e1 e3       	ldi	r30, 0x31	; 49
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	8c 93       	st	X, r24
		DHT_PORT |= (1<<DHT_INPUTPIN); //high
    11dc:	a2 e3       	ldi	r26, 0x32	; 50
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e2 e3       	ldi	r30, 0x32	; 50
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	8c 93       	st	X, r24
		DELAY_ms(100);
    11ea:	84 e6       	ldi	r24, 0x64	; 100
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

		//send request
		DHT_PORT &= ~(1<<DHT_INPUTPIN); //low
    11f2:	a2 e3       	ldi	r26, 0x32	; 50
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e2 e3       	ldi	r30, 0x32	; 50
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 77       	andi	r24, 0x7F	; 127
    11fe:	8c 93       	st	X, r24

		DELAY_ms(18);
    1200:	82 e1       	ldi	r24, 0x12	; 18
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

		DHT_PORT |= (1<<DHT_INPUTPIN); //high
    1208:	a2 e3       	ldi	r26, 0x32	; 50
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e2 e3       	ldi	r30, 0x32	; 50
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	8c 93       	st	X, r24

		DHT_DDR &= ~(1<<DHT_INPUTPIN); //input
    1216:	a1 e3       	ldi	r26, 0x31	; 49
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e1 e3       	ldi	r30, 0x31	; 49
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8f 77       	andi	r24, 0x7F	; 127
    1222:	8c 93       	st	X, r24

		while((DHT_PIN & (1<<DHT_INPUTPIN)));    //wait for high (20 ~ 40us)
    1224:	e0 e3       	ldi	r30, 0x30	; 48
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	88 23       	and	r24, r24
    122c:	dc f3       	brlt	.-10     	; 0x1224 <dht_getdata+0x84>

		while( (DHT_PIN & (1<<DHT_INPUTPIN) ) ==0 );//wait for low pulse responded from DHT22 (80us)
    122e:	e0 e3       	ldi	r30, 0x30	; 48
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	88 23       	and	r24, r24
    1236:	dc f7       	brge	.-10     	; 0x122e <dht_getdata+0x8e>

		while(DHT_PIN & (1<<DHT_INPUTPIN));     //wait for high pulse responded from DHT22 (80us)
    1238:	e0 e3       	ldi	r30, 0x30	; 48
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	88 23       	and	r24, r24
    1240:	dc f3       	brlt	.-10     	; 0x1238 <dht_getdata+0x98>

		//read the data
		uint16_t timeoutcounter = 0;
    1242:	1f 8e       	std	Y+31, r1	; 0x1f
    1244:	1e 8e       	std	Y+30, r1	; 0x1e
		for (j=0; j<5; j++) { //read 5 byte
    1246:	18 a2       	std	Y+32, r1	; 0x20
    1248:	0f c1       	rjmp	.+542    	; 0x1468 <dht_getdata+0x2c8>
			uint8_t result=0;
    124a:	1d 8e       	std	Y+29, r1	; 0x1d

			for(i=0; i<8; i++) {//read every bit
    124c:	19 a2       	std	Y+33, r1	; 0x21
    124e:	fb c0       	rjmp	.+502    	; 0x1446 <dht_getdata+0x2a6>
				timeoutcounter = 0;
    1250:	1f 8e       	std	Y+31, r1	; 0x1f
    1252:	1e 8e       	std	Y+30, r1	; 0x1e
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <dht_getdata+0xd0>

				while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
					timeoutcounter++;
    1256:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1258:	9f 8d       	ldd	r25, Y+31	; 0x1f
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	9f 8f       	std	Y+31, r25	; 0x1f
    125e:	8e 8f       	std	Y+30, r24	; 0x1e
					if(timeoutcounter > DHT_TIMEOUT) {
    1260:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1262:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1264:	89 3c       	cpi	r24, 0xC9	; 201
    1266:	91 05       	cpc	r25, r1
    1268:	18 f0       	brcs	.+6      	; 0x1270 <dht_getdata+0xd0>
						return -1; //timeout
    126a:	4f ef       	ldi	r20, 0xFF	; 255
    126c:	4b a7       	std	Y+43, r20	; 0x2b
    126e:	99 c1       	rjmp	.+818    	; 0x15a2 <dht_getdata+0x402>
			uint8_t result=0;

			for(i=0; i<8; i++) {//read every bit
				timeoutcounter = 0;

				while(!(DHT_PIN & (1<<DHT_INPUTPIN))) { //wait for an high input (non blocking)
    1270:	e0 e3       	ldi	r30, 0x30	; 48
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 23       	and	r24, r24
    1278:	74 f7       	brge	.-36     	; 0x1256 <dht_getdata+0xb6>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 ef       	ldi	r26, 0xF0	; 240
    1280:	b1 e4       	ldi	r27, 0x41	; 65
    1282:	8d 8b       	std	Y+21, r24	; 0x15
    1284:	9e 8b       	std	Y+22, r25	; 0x16
    1286:	af 8b       	std	Y+23, r26	; 0x17
    1288:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    128a:	6d 89       	ldd	r22, Y+21	; 0x15
    128c:	7e 89       	ldd	r23, Y+22	; 0x16
    128e:	8f 89       	ldd	r24, Y+23	; 0x17
    1290:	98 8d       	ldd	r25, Y+24	; 0x18
    1292:	2b ea       	ldi	r18, 0xAB	; 171
    1294:	3a ea       	ldi	r19, 0xAA	; 170
    1296:	4a e2       	ldi	r20, 0x2A	; 42
    1298:	50 e4       	ldi	r21, 0x40	; 64
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	89 8b       	std	Y+17, r24	; 0x11
    12a4:	9a 8b       	std	Y+18, r25	; 0x12
    12a6:	ab 8b       	std	Y+19, r26	; 0x13
    12a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12aa:	69 89       	ldd	r22, Y+17	; 0x11
    12ac:	7a 89       	ldd	r23, Y+18	; 0x12
    12ae:	8b 89       	ldd	r24, Y+19	; 0x13
    12b0:	9c 89       	ldd	r25, Y+20	; 0x14
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	1c f4       	brge	.+6      	; 0x12c8 <dht_getdata+0x128>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	88 8b       	std	Y+16, r24	; 0x10
    12c6:	91 c0       	rjmp	.+290    	; 0x13ea <dht_getdata+0x24a>
	else if (__tmp > 255)
    12c8:	69 89       	ldd	r22, Y+17	; 0x11
    12ca:	7a 89       	ldd	r23, Y+18	; 0x12
    12cc:	8b 89       	ldd	r24, Y+19	; 0x13
    12ce:	9c 89       	ldd	r25, Y+20	; 0x14
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	4f e7       	ldi	r20, 0x7F	; 127
    12d6:	53 e4       	ldi	r21, 0x43	; 67
    12d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	0c f0       	brlt	.+2      	; 0x12e2 <dht_getdata+0x142>
    12e0:	7b c0       	rjmp	.+246    	; 0x13d8 <dht_getdata+0x238>
	{
		_delay_ms(__us / 1000.0);
    12e2:	6d 89       	ldd	r22, Y+21	; 0x15
    12e4:	7e 89       	ldd	r23, Y+22	; 0x16
    12e6:	8f 89       	ldd	r24, Y+23	; 0x17
    12e8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4a e7       	ldi	r20, 0x7A	; 122
    12f0:	54 e4       	ldi	r21, 0x44	; 68
    12f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	8c 87       	std	Y+12, r24	; 0x0c
    12fc:	9d 87       	std	Y+13, r25	; 0x0d
    12fe:	ae 87       	std	Y+14, r26	; 0x0e
    1300:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1302:	6c 85       	ldd	r22, Y+12	; 0x0c
    1304:	7d 85       	ldd	r23, Y+13	; 0x0d
    1306:	8e 85       	ldd	r24, Y+14	; 0x0e
    1308:	9f 85       	ldd	r25, Y+15	; 0x0f
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4a ef       	ldi	r20, 0xFA	; 250
    1310:	54 e4       	ldi	r21, 0x44	; 68
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	88 87       	std	Y+8, r24	; 0x08
    131c:	99 87       	std	Y+9, r25	; 0x09
    131e:	aa 87       	std	Y+10, r26	; 0x0a
    1320:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1322:	68 85       	ldd	r22, Y+8	; 0x08
    1324:	79 85       	ldd	r23, Y+9	; 0x09
    1326:	8a 85       	ldd	r24, Y+10	; 0x0a
    1328:	9b 85       	ldd	r25, Y+11	; 0x0b
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1336:	88 23       	and	r24, r24
    1338:	2c f4       	brge	.+10     	; 0x1344 <dht_getdata+0x1a4>
		__ticks = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9f 83       	std	Y+7, r25	; 0x07
    1340:	8e 83       	std	Y+6, r24	; 0x06
    1342:	3f c0       	rjmp	.+126    	; 0x13c2 <dht_getdata+0x222>
	else if (__tmp > 65535)
    1344:	68 85       	ldd	r22, Y+8	; 0x08
    1346:	79 85       	ldd	r23, Y+9	; 0x09
    1348:	8a 85       	ldd	r24, Y+10	; 0x0a
    134a:	9b 85       	ldd	r25, Y+11	; 0x0b
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	3f ef       	ldi	r19, 0xFF	; 255
    1350:	4f e7       	ldi	r20, 0x7F	; 127
    1352:	57 e4       	ldi	r21, 0x47	; 71
    1354:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1358:	18 16       	cp	r1, r24
    135a:	4c f5       	brge	.+82     	; 0x13ae <dht_getdata+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135c:	6c 85       	ldd	r22, Y+12	; 0x0c
    135e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1360:	8e 85       	ldd	r24, Y+14	; 0x0e
    1362:	9f 85       	ldd	r25, Y+15	; 0x0f
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9f 83       	std	Y+7, r25	; 0x07
    1382:	8e 83       	std	Y+6, r24	; 0x06
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <dht_getdata+0x204>
    1386:	88 ec       	ldi	r24, 0xC8	; 200
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9d 83       	std	Y+5, r25	; 0x05
    138c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <dht_getdata+0x1f2>
    1396:	9d 83       	std	Y+5, r25	; 0x05
    1398:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	9f 81       	ldd	r25, Y+7	; 0x07
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	9f 83       	std	Y+7, r25	; 0x07
    13a2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	9f 81       	ldd	r25, Y+7	; 0x07
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	69 f7       	brne	.-38     	; 0x1386 <dht_getdata+0x1e6>
    13ac:	24 c0       	rjmp	.+72     	; 0x13f6 <dht_getdata+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ae:	68 85       	ldd	r22, Y+8	; 0x08
    13b0:	79 85       	ldd	r23, Y+9	; 0x09
    13b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    13b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9f 83       	std	Y+7, r25	; 0x07
    13c0:	8e 83       	std	Y+6, r24	; 0x06
    13c2:	8e 81       	ldd	r24, Y+6	; 0x06
    13c4:	9f 81       	ldd	r25, Y+7	; 0x07
    13c6:	9b 83       	std	Y+3, r25	; 0x03
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <dht_getdata+0x22e>
    13d2:	9b 83       	std	Y+3, r25	; 0x03
    13d4:	8a 83       	std	Y+2, r24	; 0x02
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <dht_getdata+0x256>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13d8:	69 89       	ldd	r22, Y+17	; 0x11
    13da:	7a 89       	ldd	r23, Y+18	; 0x12
    13dc:	8b 89       	ldd	r24, Y+19	; 0x13
    13de:	9c 89       	ldd	r25, Y+20	; 0x14
    13e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	88 8b       	std	Y+16, r24	; 0x10
    13ea:	88 89       	ldd	r24, Y+16	; 0x10
    13ec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	8a 95       	dec	r24
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <dht_getdata+0x250>
    13f4:	89 83       	std	Y+1, r24	; 0x01
						return -1; //timeout
					}
				}

				_delay_us(30);
				if(DHT_PIN & (1<<DHT_INPUTPIN)) //if input is high after 30 us, get result
    13f6:	e0 e3       	ldi	r30, 0x30	; 48
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	88 23       	and	r24, r24
    13fe:	ac f4       	brge	.+42     	; 0x142a <dht_getdata+0x28a>
					result |= (1<<(7-i));
    1400:	89 a1       	ldd	r24, Y+33	; 0x21
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	87 e0       	ldi	r24, 0x07	; 7
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	ac 01       	movw	r20, r24
    140c:	42 1b       	sub	r20, r18
    140e:	53 0b       	sbc	r21, r19
    1410:	9a 01       	movw	r18, r20
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <dht_getdata+0x27e>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <dht_getdata+0x27a>
    1422:	98 2f       	mov	r25, r24
    1424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1426:	89 2b       	or	r24, r25
    1428:	8d 8f       	std	Y+29, r24	; 0x1d
				timeoutcounter = 0;
    142a:	1f 8e       	std	Y+31, r1	; 0x1f
    142c:	1e 8e       	std	Y+30, r1	; 0x1e
				while(DHT_PIN & (1<<DHT_INPUTPIN)) { //wait until input get low (non blocking)
    142e:	e0 e3       	ldi	r30, 0x30	; 48
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 23       	and	r24, r24
    1436:	dc f3       	brlt	.-10     	; 0x142e <dht_getdata+0x28e>

				}
				PORTA=0xff;  //for test
    1438:	eb e3       	ldi	r30, 0x3B	; 59
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	80 83       	st	Z, r24
		//read the data
		uint16_t timeoutcounter = 0;
		for (j=0; j<5; j++) { //read 5 byte
			uint8_t result=0;

			for(i=0; i<8; i++) {//read every bit
    1440:	89 a1       	ldd	r24, Y+33	; 0x21
    1442:	8f 5f       	subi	r24, 0xFF	; 255
    1444:	89 a3       	std	Y+33, r24	; 0x21
    1446:	89 a1       	ldd	r24, Y+33	; 0x21
    1448:	88 30       	cpi	r24, 0x08	; 8
    144a:	08 f4       	brcc	.+2      	; 0x144e <dht_getdata+0x2ae>
    144c:	01 cf       	rjmp	.-510    	; 0x1250 <dht_getdata+0xb0>
				while(DHT_PIN & (1<<DHT_INPUTPIN)) { //wait until input get low (non blocking)

				}
				PORTA=0xff;  //for test
			}
			bits[j] = result;
    144e:	88 a1       	ldd	r24, Y+32	; 0x20
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	ce 01       	movw	r24, r28
    1456:	82 96       	adiw	r24, 0x22	; 34
    1458:	fc 01       	movw	r30, r24
    145a:	e2 0f       	add	r30, r18
    145c:	f3 1f       	adc	r31, r19
    145e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1460:	80 83       	st	Z, r24

		while(DHT_PIN & (1<<DHT_INPUTPIN));     //wait for high pulse responded from DHT22 (80us)

		//read the data
		uint16_t timeoutcounter = 0;
		for (j=0; j<5; j++) { //read 5 byte
    1462:	88 a1       	ldd	r24, Y+32	; 0x20
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	88 a3       	std	Y+32, r24	; 0x20
    1468:	88 a1       	ldd	r24, Y+32	; 0x20
    146a:	85 30       	cpi	r24, 0x05	; 5
    146c:	08 f4       	brcc	.+2      	; 0x1470 <dht_getdata+0x2d0>
    146e:	ed ce       	rjmp	.-550    	; 0x124a <dht_getdata+0xaa>
			}
			bits[j] = result;
		}

		//reset port
		DHT_DDR |= (1<<DHT_INPUTPIN); //output
    1470:	a1 e3       	ldi	r26, 0x31	; 49
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e1 e3       	ldi	r30, 0x31	; 49
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	8c 93       	st	X, r24
		DHT_PORT |= (1<<DHT_INPUTPIN); //low
    147e:	a2 e3       	ldi	r26, 0x32	; 50
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e2 e3       	ldi	r30, 0x32	; 50
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 68       	ori	r24, 0x80	; 128
    148a:	8c 93       	st	X, r24
		DELAY_ms(100);
    148c:	84 e6       	ldi	r24, 0x64	; 100
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

		//check checksum
		if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
    1494:	9a a1       	ldd	r25, Y+34	; 0x22
    1496:	8b a1       	ldd	r24, Y+35	; 0x23
    1498:	98 0f       	add	r25, r24
    149a:	8c a1       	ldd	r24, Y+36	; 0x24
    149c:	98 0f       	add	r25, r24
    149e:	8d a1       	ldd	r24, Y+37	; 0x25
    14a0:	98 0f       	add	r25, r24
    14a2:	8e a1       	ldd	r24, Y+38	; 0x26
    14a4:	98 17       	cp	r25, r24
    14a6:	09 f0       	breq	.+2      	; 0x14aa <dht_getdata+0x30a>
    14a8:	7a c0       	rjmp	.+244    	; 0x159e <dht_getdata+0x3fe>
			//return temperature and humidity

			uint16_t rawhumidity = bits[0]<<8 | bits[1];
    14aa:	8a a1       	ldd	r24, Y+34	; 0x22
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	38 2f       	mov	r19, r24
    14b2:	22 27       	eor	r18, r18
    14b4:	8b a1       	ldd	r24, Y+35	; 0x23
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	82 2b       	or	r24, r18
    14bc:	93 2b       	or	r25, r19
    14be:	9c 8f       	std	Y+28, r25	; 0x1c
    14c0:	8b 8f       	std	Y+27, r24	; 0x1b
			uint16_t rawtemperature = bits[2]<<8 | bits[3];
    14c2:	8c a1       	ldd	r24, Y+36	; 0x24
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	38 2f       	mov	r19, r24
    14ca:	22 27       	eor	r18, r18
    14cc:	8d a1       	ldd	r24, Y+37	; 0x25
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	82 2b       	or	r24, r18
    14d4:	93 2b       	or	r25, r19
    14d6:	9a 8f       	std	Y+26, r25	; 0x1a
    14d8:	89 8f       	std	Y+25, r24	; 0x19
			if(rawtemperature & 0x8000) {
    14da:	89 8d       	ldd	r24, Y+25	; 0x19
    14dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14de:	99 23       	and	r25, r25
    14e0:	04 f5       	brge	.+64     	; 0x1522 <dht_getdata+0x382>
				*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
    14e2:	89 8d       	ldd	r24, Y+25	; 0x19
    14e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14e6:	9f 77       	andi	r25, 0x7F	; 127
    14e8:	cc 01       	movw	r24, r24
    14ea:	a0 e0       	ldi	r26, 0x00	; 0
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	51 ec       	ldi	r21, 0xC1	; 193
    1506:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	ef a1       	ldd	r30, Y+39	; 0x27
    151c:	f8 a5       	ldd	r31, Y+40	; 0x28
    151e:	80 83       	st	Z, r24
    1520:	1e c0       	rjmp	.+60     	; 0x155e <dht_getdata+0x3be>
			} else {
				*temperature = (float)(rawtemperature)/10.0;
    1522:	89 8d       	ldd	r24, Y+25	; 0x19
    1524:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1526:	cc 01       	movw	r24, r24
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	ef a1       	ldd	r30, Y+39	; 0x27
    155a:	f8 a5       	ldd	r31, Y+40	; 0x28
    155c:	80 83       	st	Z, r24
			}
			*humidity = (float)(rawhumidity)/10.0;
    155e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1562:	cc 01       	movw	r24, r24
    1564:	a0 e0       	ldi	r26, 0x00	; 0
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	bc 01       	movw	r22, r24
    1576:	cd 01       	movw	r24, r26
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	e9 a5       	ldd	r30, Y+41	; 0x29
    1596:	fa a5       	ldd	r31, Y+42	; 0x2a
    1598:	80 83       	st	Z, r24

			return 0;
    159a:	1b a6       	std	Y+43, r1	; 0x2b
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <dht_getdata+0x402>
		}

		return -1;
    159e:	5f ef       	ldi	r21, 0xFF	; 255
    15a0:	5b a7       	std	Y+43, r21	; 0x2b
    15a2:	8b a5       	ldd	r24, Y+43	; 0x2b
	}
    15a4:	ab 96       	adiw	r28, 0x2b	; 43
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <dht_gettemperature>:
	 */
#if DHT_FLOAT == 1
	int8_t dht_gettemperature(float *temperature) {
		float humidity = 0;
#elif DHT_FLOAT == 0
		int8_t dht_gettemperature(int8_t *temperature) {
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <dht_gettemperature+0x6>
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	9b 83       	std	Y+3, r25	; 0x03
    15c4:	8a 83       	std	Y+2, r24	; 0x02
			int8_t humidity = 0;
    15c6:	19 82       	std	Y+1, r1	; 0x01
#endif
			return dht_getdata(temperature, &humidity);
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	9e 01       	movw	r18, r28
    15ce:	2f 5f       	subi	r18, 0xFF	; 255
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	b9 01       	movw	r22, r18
    15d4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <dht_getdata>
		}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <dht_gethumidity>:
		 */
#if DHT_FLOAT == 1
		int8_t dht_gethumidity(float *humidity) {
			float temperature = 0;
#elif DHT_FLOAT == 0
			int8_t dht_gethumidity(int8_t *humidity) {
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <dht_gethumidity+0x6>
    15ea:	0f 92       	push	r0
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	9b 83       	std	Y+3, r25	; 0x03
    15f2:	8a 83       	std	Y+2, r24	; 0x02
				int8_t temperature = 0;
    15f4:	19 82       	std	Y+1, r1	; 0x01
#endif
				return dht_getdata(&temperature, humidity);
    15f6:	2a 81       	ldd	r18, Y+2	; 0x02
    15f8:	3b 81       	ldd	r19, Y+3	; 0x03
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	b9 01       	movw	r22, r18
    1600:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <dht_getdata>
			}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <dht_gettemperaturehumidity>:
			 * get temperature and humidity
			 */
#if DHT_FLOAT == 1
			int8_t dht_gettemperaturehumidity(float *temperature, float *humidity) {
#elif DHT_FLOAT == 0
				int8_t dht_gettemperaturehumidity(int8_t *temperature, int8_t *humidity) {
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <dht_gettemperaturehumidity+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <dht_gettemperaturehumidity+0x8>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	7c 83       	std	Y+4, r23	; 0x04
    1622:	6b 83       	std	Y+3, r22	; 0x03
#endif
					return dht_getdata(temperature, humidity);
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	b9 01       	movw	r22, r18
    162e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <dht_getdata>
				}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <DHT22_Request>:
#include "DHT22.h"
#include "delay.h"

void DHT22_Request()				/* Microcontroller send start pulse/request */
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	DHT22_PORT_DIR |= (1<<DHT22_PIN);   //make it out
    1648:	a1 e3       	ldi	r26, 0x31	; 49
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e1 e3       	ldi	r30, 0x31	; 49
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 68       	ori	r24, 0x80	; 128
    1654:	8c 93       	st	X, r24
	DHT22_PORT_OUT |= (1<<DHT22_PIN);   //out 1
    1656:	a2 e3       	ldi	r26, 0x32	; 50
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e2 e3       	ldi	r30, 0x32	; 50
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	80 68       	ori	r24, 0x80	; 128
    1662:	8c 93       	st	X, r24
	DELAY_ms(100);			/* wait for 5ms */
    1664:	84 e6       	ldi	r24, 0x64	; 100
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	DHT22_PORT_OUT &= ~(1<<DHT22_PIN);	/* set to low pin */
    166c:	a2 e3       	ldi	r26, 0x32	; 50
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e2 e3       	ldi	r30, 0x32	; 50
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8f 77       	andi	r24, 0x7F	; 127
    1678:	8c 93       	st	X, r24
	DELAY_ms(18);			/* wait for 20ms */
    167a:	82 e1       	ldi	r24, 0x12	; 18
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	DHT22_PORT_OUT |= (1<<DHT22_PIN);   //out 1
    1682:	a2 e3       	ldi	r26, 0x32	; 50
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e2 e3       	ldi	r30, 0x32	; 50
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	80 68       	ori	r24, 0x80	; 128
    168e:	8c 93       	st	X, r24
}
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <DHT22_Response>:

void DHT22_Response()				/* receive response from DHT11 */
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
	DHT22_PORT_DIR &= ~(1<<DHT22_PIN);
    169e:	a1 e3       	ldi	r26, 0x31	; 49
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e1 e3       	ldi	r30, 0x31	; 49
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8f 77       	andi	r24, 0x7F	; 127
    16aa:	8c 93       	st	X, r24

	while((DHT22_PORT_IN & (1<<DHT22_PIN)));    //wait for high (20 ~ 40us)
    16ac:	e0 e3       	ldi	r30, 0x30	; 48
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	88 23       	and	r24, r24
    16b4:	dc f3       	brlt	.-10     	; 0x16ac <DHT22_Response+0x16>
	PORTA=0xff;                ///////for test
    16b6:	eb e3       	ldi	r30, 0x3B	; 59
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	80 83       	st	Z, r24
	while( (DHT22_PORT_IN & (1<<DHT22_PIN))==0 );//wait for low pulse responded from DHT22 (80us)
    16be:	e0 e3       	ldi	r30, 0x30	; 48
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 23       	and	r24, r24
    16c6:	dc f7       	brge	.-10     	; 0x16be <DHT22_Response+0x28>
	while(DHT22_PORT_IN & (1<<DHT22_PIN));       //wait for high pulse responded from DHT22 (80us)
    16c8:	e0 e3       	ldi	r30, 0x30	; 48
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	88 23       	and	r24, r24
    16d0:	dc f3       	brlt	.-10     	; 0x16c8 <DHT22_Response+0x32>
}
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <DHT22_Receive_Data>:

uint8_t DHT22_Receive_Data()			     /* receive data */
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	6a 97       	sbiw	r28, 0x1a	; 26
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61

	uint8 out=0 ,i;
    16ec:	1a 8e       	std	Y+26, r1	; 0x1a
	//
	for ( i=0; i<8; i++)
    16ee:	19 8e       	std	Y+25, r1	; 0x19
    16f0:	db c0       	rjmp	.+438    	; 0x18a8 <DHT22_Receive_Data+0x1d0>
	{
    	/* check received bit 0 or 1 */
		while((DHT22_PORT_IN & (1<<DHT22_PIN)) == 0);  //wait for the low pulse contained in data (50us)
    16f2:	e0 e3       	ldi	r30, 0x30	; 48
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 23       	and	r24, r24
    16fa:	dc f7       	brge	.-10     	; 0x16f2 <DHT22_Receive_Data+0x1a>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 ef       	ldi	r26, 0xF0	; 240
    1702:	b1 e4       	ldi	r27, 0x41	; 65
    1704:	8d 8b       	std	Y+21, r24	; 0x15
    1706:	9e 8b       	std	Y+22, r25	; 0x16
    1708:	af 8b       	std	Y+23, r26	; 0x17
    170a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	2b ea       	ldi	r18, 0xAB	; 171
    1716:	3a ea       	ldi	r19, 0xAA	; 170
    1718:	4a e2       	ldi	r20, 0x2A	; 42
    171a:	50 e4       	ldi	r21, 0x40	; 64
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	89 8b       	std	Y+17, r24	; 0x11
    1726:	9a 8b       	std	Y+18, r25	; 0x12
    1728:	ab 8b       	std	Y+19, r26	; 0x13
    172a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    172c:	69 89       	ldd	r22, Y+17	; 0x11
    172e:	7a 89       	ldd	r23, Y+18	; 0x12
    1730:	8b 89       	ldd	r24, Y+19	; 0x13
    1732:	9c 89       	ldd	r25, Y+20	; 0x14
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	1c f4       	brge	.+6      	; 0x174a <DHT22_Receive_Data+0x72>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	88 8b       	std	Y+16, r24	; 0x10
    1748:	91 c0       	rjmp	.+290    	; 0x186c <DHT22_Receive_Data+0x194>
	else if (__tmp > 255)
    174a:	69 89       	ldd	r22, Y+17	; 0x11
    174c:	7a 89       	ldd	r23, Y+18	; 0x12
    174e:	8b 89       	ldd	r24, Y+19	; 0x13
    1750:	9c 89       	ldd	r25, Y+20	; 0x14
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	53 e4       	ldi	r21, 0x43	; 67
    175a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	0c f0       	brlt	.+2      	; 0x1764 <DHT22_Receive_Data+0x8c>
    1762:	7b c0       	rjmp	.+246    	; 0x185a <DHT22_Receive_Data+0x182>
	{
		_delay_ms(__us / 1000.0);
    1764:	6d 89       	ldd	r22, Y+21	; 0x15
    1766:	7e 89       	ldd	r23, Y+22	; 0x16
    1768:	8f 89       	ldd	r24, Y+23	; 0x17
    176a:	98 8d       	ldd	r25, Y+24	; 0x18
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a e7       	ldi	r20, 0x7A	; 122
    1772:	54 e4       	ldi	r21, 0x44	; 68
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8c 87       	std	Y+12, r24	; 0x0c
    177e:	9d 87       	std	Y+13, r25	; 0x0d
    1780:	ae 87       	std	Y+14, r26	; 0x0e
    1782:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	6c 85       	ldd	r22, Y+12	; 0x0c
    1786:	7d 85       	ldd	r23, Y+13	; 0x0d
    1788:	8e 85       	ldd	r24, Y+14	; 0x0e
    178a:	9f 85       	ldd	r25, Y+15	; 0x0f
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a ef       	ldi	r20, 0xFA	; 250
    1792:	54 e4       	ldi	r21, 0x44	; 68
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	88 87       	std	Y+8, r24	; 0x08
    179e:	99 87       	std	Y+9, r25	; 0x09
    17a0:	aa 87       	std	Y+10, r26	; 0x0a
    17a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    17a4:	68 85       	ldd	r22, Y+8	; 0x08
    17a6:	79 85       	ldd	r23, Y+9	; 0x09
    17a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <DHT22_Receive_Data+0xee>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9f 83       	std	Y+7, r25	; 0x07
    17c2:	8e 83       	std	Y+6, r24	; 0x06
    17c4:	3f c0       	rjmp	.+126    	; 0x1844 <DHT22_Receive_Data+0x16c>
	else if (__tmp > 65535)
    17c6:	68 85       	ldd	r22, Y+8	; 0x08
    17c8:	79 85       	ldd	r23, Y+9	; 0x09
    17ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    17cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	4c f5       	brge	.+82     	; 0x1830 <DHT22_Receive_Data+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17de:	6c 85       	ldd	r22, Y+12	; 0x0c
    17e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    17e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9f 83       	std	Y+7, r25	; 0x07
    1804:	8e 83       	std	Y+6, r24	; 0x06
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <DHT22_Receive_Data+0x14e>
    1808:	88 ec       	ldi	r24, 0xC8	; 200
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9d 83       	std	Y+5, r25	; 0x05
    180e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	9d 81       	ldd	r25, Y+5	; 0x05
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <DHT22_Receive_Data+0x13c>
    1818:	9d 83       	std	Y+5, r25	; 0x05
    181a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	8e 81       	ldd	r24, Y+6	; 0x06
    181e:	9f 81       	ldd	r25, Y+7	; 0x07
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9f 83       	std	Y+7, r25	; 0x07
    1824:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	8e 81       	ldd	r24, Y+6	; 0x06
    1828:	9f 81       	ldd	r25, Y+7	; 0x07
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	69 f7       	brne	.-38     	; 0x1808 <DHT22_Receive_Data+0x130>
    182e:	24 c0       	rjmp	.+72     	; 0x1878 <DHT22_Receive_Data+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	68 85       	ldd	r22, Y+8	; 0x08
    1832:	79 85       	ldd	r23, Y+9	; 0x09
    1834:	8a 85       	ldd	r24, Y+10	; 0x0a
    1836:	9b 85       	ldd	r25, Y+11	; 0x0b
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9f 83       	std	Y+7, r25	; 0x07
    1842:	8e 83       	std	Y+6, r24	; 0x06
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	9f 81       	ldd	r25, Y+7	; 0x07
    1848:	9b 83       	std	Y+3, r25	; 0x03
    184a:	8a 83       	std	Y+2, r24	; 0x02
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <DHT22_Receive_Data+0x178>
    1854:	9b 83       	std	Y+3, r25	; 0x03
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <DHT22_Receive_Data+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    185a:	69 89       	ldd	r22, Y+17	; 0x11
    185c:	7a 89       	ldd	r23, Y+18	; 0x12
    185e:	8b 89       	ldd	r24, Y+19	; 0x13
    1860:	9c 89       	ldd	r25, Y+20	; 0x14
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	88 8b       	std	Y+16, r24	; 0x10
    186c:	88 89       	ldd	r24, Y+16	; 0x10
    186e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	8a 95       	dec	r24
    1874:	f1 f7       	brne	.-4      	; 0x1872 <DHT22_Receive_Data+0x19a>
    1876:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(30);

		if(DHT22_PORT_IN &(1<<DHT22_PIN))/* if high pulse is greater than 30ms */
    1878:	e0 e3       	ldi	r30, 0x30	; 48
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	88 23       	and	r24, r24
    1880:	44 f4       	brge	.+16     	; 0x1892 <DHT22_Receive_Data+0x1ba>
			out = (out<<1)|(0x01);	/* then its logic HIGH (1) */
    1882:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	81 60       	ori	r24, 0x01	; 1
    188e:	8a 8f       	std	Y+26, r24	; 0x1a
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <DHT22_Receive_Data+0x1c0>
		else		             	/* otherwise its logic LOW */
			out = (out<<1);
    1892:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1894:	88 0f       	add	r24, r24
    1896:	8a 8f       	std	Y+26, r24	; 0x1a
		while ((DHT22_PORT_IN & (1<<DHT22_PIN))); //wait for the last from 70us
    1898:	e0 e3       	ldi	r30, 0x30	; 48
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	88 23       	and	r24, r24
    18a0:	dc f3       	brlt	.-10     	; 0x1898 <DHT22_Receive_Data+0x1c0>
uint8_t DHT22_Receive_Data()			     /* receive data */
{

	uint8 out=0 ,i;
	//
	for ( i=0; i<8; i++)
    18a2:	89 8d       	ldd	r24, Y+25	; 0x19
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	89 8f       	std	Y+25, r24	; 0x19
    18a8:	89 8d       	ldd	r24, Y+25	; 0x19
    18aa:	88 30       	cpi	r24, 0x08	; 8
    18ac:	08 f4       	brcc	.+2      	; 0x18b0 <DHT22_Receive_Data+0x1d8>
    18ae:	21 cf       	rjmp	.-446    	; 0x16f2 <DHT22_Receive_Data+0x1a>
		else		             	/* otherwise its logic LOW */
			out = (out<<1);
		while ((DHT22_PORT_IN & (1<<DHT22_PIN))); //wait for the last from 70us

	}
	return out;
    18b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
    18b2:	6a 96       	adiw	r28, 0x1a	; 26
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <IN_EEPROM_WriteByte>:
#include "internal_eeprom.h"

void IN_EEPROM_WriteByte(uint16 addr ,uint8 data )
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <IN_EEPROM_WriteByte+0x6>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	6b 83       	std	Y+3, r22	; 0x03
	while(BIT_IS_SET(EECR,EEWE));//
    18d6:	ec e3       	ldi	r30, 0x3C	; 60
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	82 70       	andi	r24, 0x02	; 2
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	b9 f7       	brne	.-18     	; 0x18d6 <IN_EEPROM_WriteByte+0x12>

	EEAR = addr;
    18e8:	ee e3       	ldi	r30, 0x3E	; 62
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
	EEDR = data;
    18f4:	ed e3       	ldi	r30, 0x3D	; 61
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	80 83       	st	Z, r24
	EECR  = (1 << EEMWE);   //EECR=0;
    18fc:	ec e3       	ldi	r30, 0x3C	; 60
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	84 e0       	ldi	r24, 0x04	; 4
    1902:	80 83       	st	Z, r24
	SET_BIT(EECR,EEWE);
    1904:	ac e3       	ldi	r26, 0x3C	; 60
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ec e3       	ldi	r30, 0x3C	; 60
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	82 60       	ori	r24, 0x02	; 2
    1910:	8c 93       	st	X, r24
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <IN_EEPROM_ReadByte>:

uint8 IN_EEPROM_ReadByte(uint16 addr )
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <IN_EEPROM_ReadByte+0x6>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_SET(EECR,EEWE));
    192c:	ec e3       	ldi	r30, 0x3C	; 60
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	82 70       	andi	r24, 0x02	; 2
    1938:	90 70       	andi	r25, 0x00	; 0
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	b9 f7       	brne	.-18     	; 0x192c <IN_EEPROM_ReadByte+0xe>

	EEAR = addr;
    193e:	ee e3       	ldi	r30, 0x3E	; 62
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	9a 81       	ldd	r25, Y+2	; 0x02
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
	EECR = 1 << EERE;  //EECR=0;
    194a:	ec e3       	ldi	r30, 0x3C	; 60
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	80 83       	st	Z, r24

	return EEDR;
    1952:	ed e3       	ldi	r30, 0x3D	; 61
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <IN_EEPROM_WriteBytes>:
void IN_EEPROM_WriteBytes(uint16 addr ,uint8 *data ,uint8 data_size )
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <IN_EEPROM_WriteBytes+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <IN_EEPROM_WriteBytes+0x8>
    196a:	0f 92       	push	r0
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	7c 83       	std	Y+4, r23	; 0x04
    1976:	6b 83       	std	Y+3, r22	; 0x03
    1978:	4d 83       	std	Y+5, r20	; 0x05
    197a:	15 c0       	rjmp	.+42     	; 0x19a6 <IN_EEPROM_WriteBytes+0x44>
	while(data_size !=  0)
	{
		IN_EEPROM_WriteByte(addr,*data);    //Write a byte from RAM to EEPROM
    197c:	eb 81       	ldd	r30, Y+3	; 0x03
    197e:	fc 81       	ldd	r31, Y+4	; 0x04
    1980:	20 81       	ld	r18, Z
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	62 2f       	mov	r22, r18
    1988:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <IN_EEPROM_WriteByte>
		addr++;				                 //Increment the Eeprom Address
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	9a 83       	std	Y+2, r25	; 0x02
    1994:	89 83       	std	Y+1, r24	; 0x01
		data++;				                 //Increment the RAM Address
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
		data_size--;					     //Decrement NoOfBytes after writing each Byte
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	8d 83       	std	Y+5, r24	; 0x05

	return EEDR;
}
void IN_EEPROM_WriteBytes(uint16 addr ,uint8 *data ,uint8 data_size )
{
	while(data_size !=  0)
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	88 23       	and	r24, r24
    19aa:	41 f7       	brne	.-48     	; 0x197c <IN_EEPROM_WriteBytes+0x1a>
		IN_EEPROM_WriteByte(addr,*data);    //Write a byte from RAM to EEPROM
		addr++;				                 //Increment the Eeprom Address
		data++;				                 //Increment the RAM Address
		data_size--;					     //Decrement NoOfBytes after writing each Byte
	}
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <IN_EEPROM_ReadBytes>:
void IN_EEPROM_ReadBytes(uint16 addr, uint8_t *data, uint8 data_size)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <IN_EEPROM_ReadBytes+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <IN_EEPROM_ReadBytes+0x8>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	7c 83       	std	Y+4, r23	; 0x04
    19d0:	6b 83       	std	Y+3, r22	; 0x03
    19d2:	4d 83       	std	Y+5, r20	; 0x05
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <IN_EEPROM_ReadBytes+0x42>
	while(data_size !=  0)
	{
		*data = IN_EEPROM_ReadByte(addr); //Read a byte from EEPROM to RAM
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	0e 94 8f 0c 	call	0x191e	; 0x191e <IN_EEPROM_ReadByte>
    19de:	eb 81       	ldd	r30, Y+3	; 0x03
    19e0:	fc 81       	ldd	r31, Y+4	; 0x04
    19e2:	80 83       	st	Z, r24
		addr++;						   //Increment the EEPROM Address
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
		data++;						   //Increment the RAM Address
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
		data_size--;				   //Decrement NoOfBytes after Reading each Byte
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	81 50       	subi	r24, 0x01	; 1
    19fc:	8d 83       	std	Y+5, r24	; 0x05
		data_size--;					     //Decrement NoOfBytes after writing each Byte
	}
}
void IN_EEPROM_ReadBytes(uint16 addr, uint8_t *data, uint8 data_size)
{
	while(data_size !=  0)
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	88 23       	and	r24, r24
    1a02:	49 f7       	brne	.-46     	; 0x19d6 <IN_EEPROM_ReadBytes+0x1a>
		*data = IN_EEPROM_ReadByte(addr); //Read a byte from EEPROM to RAM
		addr++;						   //Increment the EEPROM Address
		data++;						   //Increment the RAM Address
		data_size--;				   //Decrement NoOfBytes after Reading each Byte
	}
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <EEPROM_Erase>:

void EEPROM_Erase()
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <EEPROM_Erase+0x6>
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <EEPROM_Erase+0x8>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	uint16_t addr  , MaxEepromSize_U16 = 1024;
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	94 e0       	ldi	r25, 0x04	; 4
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01

	for(addr=0; addr< MaxEepromSize_U16; addr++)
    1a28:	1c 82       	std	Y+4, r1	; 0x04
    1a2a:	1b 82       	std	Y+3, r1	; 0x03
    1a2c:	0a c0       	rjmp	.+20     	; 0x1a42 <EEPROM_Erase+0x2e>
	{
		IN_EEPROM_WriteByte(addr,0xffu); // Write Each memory location with OxFF
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	6f ef       	ldi	r22, 0xFF	; 255
    1a34:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <IN_EEPROM_WriteByte>

void EEPROM_Erase()
{
	uint16_t addr  , MaxEepromSize_U16 = 1024;

	for(addr=0; addr< MaxEepromSize_U16; addr++)
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    1a42:	2b 81       	ldd	r18, Y+3	; 0x03
    1a44:	3c 81       	ldd	r19, Y+4	; 0x04
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	28 17       	cp	r18, r24
    1a4c:	39 07       	cpc	r19, r25
    1a4e:	78 f3       	brcs	.-34     	; 0x1a2e <EEPROM_Erase+0x1a>
	{
		IN_EEPROM_WriteByte(addr,0xffu); // Write Each memory location with OxFF
	}
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <INT0_Init>:
static volatile void (*g_INT0_CallBackPtr)(void) = NULL;
static volatile void (*g_INT1_CallBackPtr)(void) = NULL;
static volatile void (*g_INT2_CallBackPtr)(void) = NULL;

void INT0_Init(INTERRUPT_Config *Config_Ptr)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <INT0_Init+0x6>
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1<<2);  //enable external interrupt 0
    1a6c:	a1 e3       	ldi	r26, 0x31	; 49
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e1 e3       	ldi	r30, 0x31	; 49
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8b 7f       	andi	r24, 0xFB	; 251
    1a78:	8c 93       	st	X, r24
	PORTD |= (Config_Ptr->pull<<2); //enable pull up for interrupt 0
    1a7a:	a2 e3       	ldi	r26, 0x32	; 50
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e2 e3       	ldi	r30, 0x32	; 50
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	28 2f       	mov	r18, r24
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	81 81       	ldd	r24, Z+1	; 0x01
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	82 2b       	or	r24, r18
    1a9a:	8c 93       	st	X, r24

	MCUCR=(MCUCR&0xfc)|(Config_Ptr->edge&0x03); //edge for rising or falling edge
    1a9c:	a5 e5       	ldi	r26, 0x55	; 85
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e5 e5       	ldi	r30, 0x55	; 85
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	9c 7f       	andi	r25, 0xFC	; 252
    1aaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1aac:	fa 81       	ldd	r31, Y+2	; 0x02
    1aae:	80 81       	ld	r24, Z
    1ab0:	83 70       	andi	r24, 0x03	; 3
    1ab2:	89 2b       	or	r24, r25
    1ab4:	8c 93       	st	X, r24
	GICR |=(1<<INT0); //enable interrupt 0 module
    1ab6:	ab e5       	ldi	r26, 0x5B	; 91
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	eb e5       	ldi	r30, 0x5B	; 91
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 64       	ori	r24, 0x40	; 64
    1ac2:	8c 93       	st	X, r24
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <INT0_CallBack>:
void INT0_CallBack(void(*a_ptr)(void))
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <INT0_CallBack+0x6>
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT0_CallBackPtr = a_ptr;
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	90 93 7c 01 	sts	0x017C, r25
    1ae4:	80 93 7b 01 	sts	0x017B, r24
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <__vector_1>:
ISR(INT0_vect)
{
    1af2:	1f 92       	push	r1
    1af4:	0f 92       	push	r0
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	0f 92       	push	r0
    1afa:	11 24       	eor	r1, r1
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	if(g_INT0_CallBackPtr != NULL)
    1b1c:	80 91 7b 01 	lds	r24, 0x017B
    1b20:	90 91 7c 01 	lds	r25, 0x017C
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	29 f0       	breq	.+10     	; 0x1b32 <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT0_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1b28:	e0 91 7b 01 	lds	r30, 0x017B
    1b2c:	f0 91 7c 01 	lds	r31, 0x017C
    1b30:	09 95       	icall
	}
}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <INT1_Init>:

////////////////////////////////////////////////////
void INT1_Init(INTERRUPT_Config *Config_Ptr)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <INT1_Init+0x6>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~(1<<3);   // pin
    1b66:	a1 e3       	ldi	r26, 0x31	; 49
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e1 e3       	ldi	r30, 0x31	; 49
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	87 7f       	andi	r24, 0xF7	; 247
    1b72:	8c 93       	st	X, r24
	PORTD |= (Config_Ptr->pull<<3);   //enable pull up for interrupt 1
    1b74:	a2 e3       	ldi	r26, 0x32	; 50
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e2 e3       	ldi	r30, 0x32	; 50
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	28 2f       	mov	r18, r24
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	81 81       	ldd	r24, Z+1	; 0x01
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	82 2b       	or	r24, r18
    1b98:	8c 93       	st	X, r24

	//flags
    MCUCR=(MCUCR&0xf3)|((Config_Ptr->edge&0x03)<<2);
    1b9a:	a5 e5       	ldi	r26, 0x55	; 85
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e5 e5       	ldi	r30, 0x55	; 85
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	23 7f       	andi	r18, 0xF3	; 243
    1ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    1baa:	fa 81       	ldd	r31, Y+2	; 0x02
    1bac:	80 81       	ld	r24, Z
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	83 70       	andi	r24, 0x03	; 3
    1bb4:	90 70       	andi	r25, 0x00	; 0
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	82 2b       	or	r24, r18
    1bc0:	8c 93       	st	X, r24
    GICR |=(1<<INT1);  //module
    1bc2:	ab e5       	ldi	r26, 0x5B	; 91
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	eb e5       	ldi	r30, 0x5B	; 91
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 68       	ori	r24, 0x80	; 128
    1bce:	8c 93       	st	X, r24
}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <INT1_CallBack>:
void INT1_CallBack(void(*a_ptr)(void))
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <INT1_CallBack+0x6>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT1_CallBackPtr = a_ptr;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	90 93 7e 01 	sts	0x017E, r25
    1bf0:	80 93 7d 01 	sts	0x017D, r24
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <__vector_2>:
ISR(INT1_vect)
{
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	if(g_INT1_CallBackPtr != NULL)
    1c28:	80 91 7d 01 	lds	r24, 0x017D
    1c2c:	90 91 7e 01 	lds	r25, 0x017E
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	29 f0       	breq	.+10     	; 0x1c3e <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT1_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1c34:	e0 91 7d 01 	lds	r30, 0x017D
    1c38:	f0 91 7e 01 	lds	r31, 0x017E
    1c3c:	09 95       	icall
	}
}
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <INT2_Init>:
////////////////////////////////////////////////////
void INT2_Init(INTERRUPT_Config *Config_Ptr)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <INT2_Init+0x6>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
	DDRB &= ~(1<<2);
    1c72:	a7 e3       	ldi	r26, 0x37	; 55
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e7 e3       	ldi	r30, 0x37	; 55
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8b 7f       	andi	r24, 0xFB	; 251
    1c7e:	8c 93       	st	X, r24
	PORTB|=  (Config_Ptr->pull<<2);
    1c80:	a8 e3       	ldi	r26, 0x38	; 56
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e8 e3       	ldi	r30, 0x38	; 56
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	81 81       	ldd	r24, Z+1	; 0x01
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	82 2b       	or	r24, r18
    1ca0:	8c 93       	st	X, r24

    MCUCSR=(MCUCSR&0xbf)|((Config_Ptr->edge&0x01)<<ISC2); //<<6
    1ca2:	a4 e5       	ldi	r26, 0x54	; 84
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e4 e5       	ldi	r30, 0x54	; 84
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	28 2f       	mov	r18, r24
    1cae:	2f 7b       	andi	r18, 0xBF	; 191
    1cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	81 70       	andi	r24, 0x01	; 1
    1cbc:	90 70       	andi	r25, 0x00	; 0
    1cbe:	00 24       	eor	r0, r0
    1cc0:	96 95       	lsr	r25
    1cc2:	87 95       	ror	r24
    1cc4:	07 94       	ror	r0
    1cc6:	96 95       	lsr	r25
    1cc8:	87 95       	ror	r24
    1cca:	07 94       	ror	r0
    1ccc:	98 2f       	mov	r25, r24
    1cce:	80 2d       	mov	r24, r0
    1cd0:	82 2b       	or	r24, r18
    1cd2:	8c 93       	st	X, r24
    GICR |=(1<<INT2);
    1cd4:	ab e5       	ldi	r26, 0x5B	; 91
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	eb e5       	ldi	r30, 0x5B	; 91
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	80 62       	ori	r24, 0x20	; 32
    1ce0:	8c 93       	st	X, r24
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <INT2_CallBack>:
void INT2_CallBack(void(*a_ptr)(void))
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <INT2_CallBack+0x6>
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT2_CallBackPtr = a_ptr;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	90 93 80 01 	sts	0x0180, r25
    1d02:	80 93 7f 01 	sts	0x017F, r24
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <__vector_18>:
ISR(INT2_vect)
{
    1d10:	1f 92       	push	r1
    1d12:	0f 92       	push	r0
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	0f 92       	push	r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	2f 93       	push	r18
    1d1c:	3f 93       	push	r19
    1d1e:	4f 93       	push	r20
    1d20:	5f 93       	push	r21
    1d22:	6f 93       	push	r22
    1d24:	7f 93       	push	r23
    1d26:	8f 93       	push	r24
    1d28:	9f 93       	push	r25
    1d2a:	af 93       	push	r26
    1d2c:	bf 93       	push	r27
    1d2e:	ef 93       	push	r30
    1d30:	ff 93       	push	r31
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
	if(g_INT2_CallBackPtr != NULL)
    1d3a:	80 91 7f 01 	lds	r24, 0x017F
    1d3e:	90 91 80 01 	lds	r25, 0x0180
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	29 f0       	breq	.+10     	; 0x1d50 <__vector_18+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT2_CallBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_OVF_callBackPtr(); */
    1d46:	e0 91 7f 01 	lds	r30, 0x017F
    1d4a:	f0 91 80 01 	lds	r31, 0x0180
    1d4e:	09 95       	icall
	}
}
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	ff 91       	pop	r31
    1d56:	ef 91       	pop	r30
    1d58:	bf 91       	pop	r27
    1d5a:	af 91       	pop	r26
    1d5c:	9f 91       	pop	r25
    1d5e:	8f 91       	pop	r24
    1d60:	7f 91       	pop	r23
    1d62:	6f 91       	pop	r22
    1d64:	5f 91       	pop	r21
    1d66:	4f 91       	pop	r20
    1d68:	3f 91       	pop	r19
    1d6a:	2f 91       	pop	r18
    1d6c:	0f 90       	pop	r0
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	0f 90       	pop	r0
    1d72:	1f 90       	pop	r1
    1d74:	18 95       	reti

00001d76 <INT_Deinit>:

////////////////////////////////////////////////////
void INT_Deinit(uint8 interrupts_det)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	89 83       	std	Y+1, r24	; 0x01
    /*clear specified interrupts*/    
	GICR &=~(interrupts_det<<5);
    1d82:	ab e5       	ldi	r26, 0x5B	; 91
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	eb e5       	ldi	r30, 0x5B	; 91
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	82 95       	swap	r24
    1d9a:	92 95       	swap	r25
    1d9c:	90 7f       	andi	r25, 0xF0	; 240
    1d9e:	98 27       	eor	r25, r24
    1da0:	80 7f       	andi	r24, 0xF0	; 240
    1da2:	98 27       	eor	r25, r24
    1da4:	80 95       	com	r24
    1da6:	82 23       	and	r24, r18
    1da8:	8c 93       	st	X, r24
}
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1dba:	a7 e3       	ldi	r26, 0x37	; 55
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e7 e3       	ldi	r30, 0x37	; 55
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 67       	ori	r24, 0x70	; 112
    1dc6:	8c 93       	st	X, r24

#if (LCD_DATA_BITS == 4)
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
#else
	LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    1dc8:	a7 e3       	ldi	r26, 0x37	; 55
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e7 e3       	ldi	r30, 0x37	; 55
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	8f 60       	ori	r24, 0x0F	; 15
    1dd4:	8c 93       	st	X, r24
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE);        /* initialize LCD in 4-bit mode */
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1ddc:	88 e2       	ldi	r24, 0x28	; 40
    1dde:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_sendCommand>
#elif (LCD_DATA_BITS == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);   /* cursor off */
    1de2:	8c e0       	ldi	r24, 0x0C	; 12
    1de4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN); /* clear LCD at the beginning */
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_sendCommand>
}
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RS); /* Instruction Mode RS=0 */
    1e00:	a8 e3       	ldi	r26, 0x38	; 56
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e8 e3       	ldi	r30, 0x38	; 56
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	8f 7e       	andi	r24, 0xEF	; 239
    1e0c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW); /* write data to LCD so RW=0 */
    1e0e:	a8 e3       	ldi	r26, 0x38	; 56
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e8 e3       	ldi	r30, 0x38	; 56
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8f 7d       	andi	r24, 0xDF	; 223
    1e1a:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tas = 50ns */
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    1e24:	a8 e3       	ldi	r26, 0x38	; 56
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e8 e3       	ldi	r30, 0x38	; 56
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 64       	ori	r24, 0x40	; 64
    1e30:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tpw - Tdsw = 190ns */
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
#if (LCD_DATA_BITS == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0xF0) | ((command & 0xF0) >> 4);
    1e3a:	a8 e3       	ldi	r26, 0x38	; 56
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e8 e3       	ldi	r30, 0x38	; 56
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	98 2f       	mov	r25, r24
    1e46:	90 7f       	andi	r25, 0xF0	; 240
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	82 95       	swap	r24
    1e4c:	8f 70       	andi	r24, 0x0F	; 15
    1e4e:	89 2b       	or	r24, r25
    1e50:	8c 93       	st	X, r24
#endif

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    1e5a:	a8 e3       	ldi	r26, 0x38	; 56
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e8 e3       	ldi	r30, 0x38	; 56
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 7b       	andi	r24, 0xBF	; 191
    1e66:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Th = 13ns */
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    1e70:	a8 e3       	ldi	r26, 0x38	; 56
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e8 e3       	ldi	r30, 0x38	; 56
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	80 64       	ori	r24, 0x40	; 64
    1e7c:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0xF0) | (command & 0x0F);
    1e86:	a8 e3       	ldi	r26, 0x38	; 56
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e8 e3       	ldi	r30, 0x38	; 56
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	98 2f       	mov	r25, r24
    1e92:	90 7f       	andi	r25, 0xF0	; 240
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	8f 70       	andi	r24, 0x0F	; 15
    1e98:	89 2b       	or	r24, r25
    1e9a:	8c 93       	st	X, r24
#endif

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    1ea4:	a8 e3       	ldi	r26, 0x38	; 56
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e8 e3       	ldi	r30, 0x38	; 56
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	8f 7b       	andi	r24, 0xBF	; 191
    1eb0:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Th = 13ns */
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	LCD_DATA_PORT_OUT = command ;  /* out the required command to the data bus D0 --> D7 */
	DELAY_ms(1);                 /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
	DELAY_ms(1);                 /* delay for processing Th = 13ns */
#endif
}
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <LCD_displayCharacter>:


void LCD_displayCharacter(uint8 data)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LCD_CTRL_PORT_OUT,RS); /* Data Mode RS=1 */
    1ece:	a8 e3       	ldi	r26, 0x38	; 56
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e8 e3       	ldi	r30, 0x38	; 56
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 61       	ori	r24, 0x10	; 16
    1eda:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT_OUT,RW); /* write data to LCD so RW=0 */
    1edc:	a8 e3       	ldi	r26, 0x38	; 56
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e8 e3       	ldi	r30, 0x38	; 56
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 7d       	andi	r24, 0xDF	; 223
    1ee8:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tas = 50ns */
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    1ef2:	a8 e3       	ldi	r26, 0x38	; 56
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e8 e3       	ldi	r30, 0x38	; 56
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	80 64       	ori	r24, 0x40	; 64
    1efe:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
#if (LCD_DATA_BITS == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0xF0) | ((data & 0xF0) >> 4);
    1f08:	a8 e3       	ldi	r26, 0x38	; 56
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e8 e3       	ldi	r30, 0x38	; 56
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	98 2f       	mov	r25, r24
    1f14:	90 7f       	andi	r25, 0xF0	; 240
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	82 95       	swap	r24
    1f1a:	8f 70       	andi	r24, 0x0F	; 15
    1f1c:	89 2b       	or	r24, r25
    1f1e:	8c 93       	st	X, r24
#endif

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    1f28:	a8 e3       	ldi	r26, 0x38	; 56
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e8 e3       	ldi	r30, 0x38	; 56
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	8f 7b       	andi	r24, 0xBF	; 191
    1f34:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Th = 13ns */
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	SET_BIT(LCD_CTRL_PORT_OUT,E); /* Enable LCD E=1 */
    1f3e:	a8 e3       	ldi	r26, 0x38	; 56
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e8 e3       	ldi	r30, 0x38	; 56
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	80 64       	ori	r24, 0x40	; 64
    1f4a:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Tpw - Tdws = 190ns */
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT_OUT = (LCD_DATA_PORT_OUT & 0xF0) | (data & 0x0F);
    1f54:	a8 e3       	ldi	r26, 0x38	; 56
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e8 e3       	ldi	r30, 0x38	; 56
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	98 2f       	mov	r25, r24
    1f60:	90 7f       	andi	r25, 0xF0	; 240
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	8f 70       	andi	r24, 0x0F	; 15
    1f66:	89 2b       	or	r24, r25
    1f68:	8c 93       	st	X, r24
#endif

	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
    1f72:	a8 e3       	ldi	r26, 0x38	; 56
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e8 e3       	ldi	r30, 0x38	; 56
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	8f 7b       	andi	r24, 0xBF	; 191
    1f7e:	8c 93       	st	X, r24
	DELAY_ms(1); /* delay for processing Th = 13ns */
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
	LCD_DATA_PORT_OUT = data; /* out the required data to the data bus D0 --> D7 */
	DELAY_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT_OUT,E); /* disable LCD E=0 */
	DELAY_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <LCD_displayString+0x6>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	0a c0       	rjmp	.+20     	; 0x1fb4 <LCD_displayString+0x24>
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	80 81       	ld	r24, Z
    1fa6:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_displayCharacter>
		Str++;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	9a 83       	std	Y+2, r25	; 0x02
    1fb2:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	80 81       	ld	r24, Z
    1fba:	88 23       	and	r24, r24
    1fbc:	89 f7       	brne	.-30     	; 0x1fa0 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <LCD_goToRowColumn+0x6>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <LCD_goToRowColumn+0x8>
    1fd0:	0f 92       	push	r0
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	8a 83       	std	Y+2, r24	; 0x02
    1fd8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	3d 83       	std	Y+5, r19	; 0x05
    1fe2:	2c 83       	std	Y+4, r18	; 0x04
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	c1 f0       	breq	.+48     	; 0x201e <LCD_goToRowColumn+0x56>
    1fee:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <LCD_goToRowColumn+0x3a>
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	61 f0       	breq	.+24     	; 0x2018 <LCD_goToRowColumn+0x50>
    2000:	19 c0       	rjmp	.+50     	; 0x2034 <LCD_goToRowColumn+0x6c>
    2002:	2c 81       	ldd	r18, Y+4	; 0x04
    2004:	3d 81       	ldd	r19, Y+5	; 0x05
    2006:	22 30       	cpi	r18, 0x02	; 2
    2008:	31 05       	cpc	r19, r1
    200a:	69 f0       	breq	.+26     	; 0x2026 <LCD_goToRowColumn+0x5e>
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	91 05       	cpc	r25, r1
    2014:	61 f0       	breq	.+24     	; 0x202e <LCD_goToRowColumn+0x66>
    2016:	0e c0       	rjmp	.+28     	; 0x2034 <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	0b c0       	rjmp	.+22     	; 0x2034 <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	80 5c       	subi	r24, 0xC0	; 192
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	07 c0       	rjmp	.+14     	; 0x2034 <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	80 5f       	subi	r24, 0xF0	; 240
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	03 c0       	rjmp	.+6      	; 0x2034 <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	80 5b       	subi	r24, 0xB0	; 176
    2032:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	80 68       	ori	r24, 0x80	; 128
    2038:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_sendCommand>
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <LCD_displayStringRowColumn+0x6>
    2052:	00 d0       	rcall	.+0      	; 0x2054 <LCD_displayStringRowColumn+0x8>
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	6a 83       	std	Y+2, r22	; 0x02
    205c:	5c 83       	std	Y+4, r21	; 0x04
    205e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	6a 81       	ldd	r22, Y+2	; 0x02
    2064:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayString>
	//		}
	//	col++;
	//	if (col==15)
	//		row=1;
	//
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <LCD_displayNumber>:

void LCD_displayNumber(sint32 number) /* max number is size of uint: 4294967295 */
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	27 97       	sbiw	r28, 0x07	; 7
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	6c 83       	std	Y+4, r22	; 0x04
    2094:	7d 83       	std	Y+5, r23	; 0x05
    2096:	8e 83       	std	Y+6, r24	; 0x06
    2098:	9f 83       	std	Y+7, r25	; 0x07
	static char str[11];       //max number entered to display on lcd
	char *buff = &str[10];     /* String to hold the ascii result */
    209a:	8b e8       	ldi	r24, 0x8B	; 139
    209c:	91 e0       	ldi	r25, 0x01	; 1
    209e:	9b 83       	std	Y+3, r25	; 0x03
    20a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 negtive_flag = 0 ;
    20a2:	19 82       	std	Y+1, r1	; 0x01
	if (number<0){
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	ae 81       	ldd	r26, Y+6	; 0x06
    20aa:	bf 81       	ldd	r27, Y+7	; 0x07
    20ac:	bb 23       	and	r27, r27
    20ae:	8c f4       	brge	.+34     	; 0x20d2 <LCD_displayNumber+0x54>
		negtive_flag=1  ;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	89 83       	std	Y+1, r24	; 0x01
		number = -number ;
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	9d 81       	ldd	r25, Y+5	; 0x05
    20b8:	ae 81       	ldd	r26, Y+6	; 0x06
    20ba:	bf 81       	ldd	r27, Y+7	; 0x07
    20bc:	b0 95       	com	r27
    20be:	a0 95       	com	r26
    20c0:	90 95       	com	r25
    20c2:	81 95       	neg	r24
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	af 4f       	sbci	r26, 0xFF	; 255
    20c8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ca:	8c 83       	std	Y+4, r24	; 0x04
    20cc:	9d 83       	std	Y+5, r25	; 0x05
    20ce:	ae 83       	std	Y+6, r26	; 0x06
    20d0:	bf 83       	std	Y+7, r27	; 0x07
	}
	*buff = '\0';
    20d2:	ea 81       	ldd	r30, Y+2	; 0x02
    20d4:	fb 81       	ldd	r31, Y+3	; 0x03
    20d6:	10 82       	st	Z, r1
	if (number == 0){
    20d8:	8c 81       	ldd	r24, Y+4	; 0x04
    20da:	9d 81       	ldd	r25, Y+5	; 0x05
    20dc:	ae 81       	ldd	r26, Y+6	; 0x06
    20de:	bf 81       	ldd	r27, Y+7	; 0x07
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	a1 05       	cpc	r26, r1
    20e4:	b1 05       	cpc	r27, r1
    20e6:	b1 f5       	brne	.+108    	; 0x2154 <LCD_displayNumber+0xd6>
		*--buff = '0';
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	8a 83       	std	Y+2, r24	; 0x02
    20f2:	ea 81       	ldd	r30, Y+2	; 0x02
    20f4:	fb 81       	ldd	r31, Y+3	; 0x03
    20f6:	80 e3       	ldi	r24, 0x30	; 48
    20f8:	80 83       	st	Z, r24
    20fa:	35 c0       	rjmp	.+106    	; 0x2166 <LCD_displayNumber+0xe8>
	}
	else {
		while(number>0)
		{
			*--buff = "0123456789"[number %10]; /* 10 for decimal */
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	9b 83       	std	Y+3, r25	; 0x03
    2104:	8a 83       	std	Y+2, r24	; 0x02
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	9d 81       	ldd	r25, Y+5	; 0x05
    210a:	ae 81       	ldd	r26, Y+6	; 0x06
    210c:	bf 81       	ldd	r27, Y+7	; 0x07
    210e:	2a e0       	ldi	r18, 0x0A	; 10
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__divmodsi4>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	fc 01       	movw	r30, r24
    2124:	e0 5a       	subi	r30, 0xA0	; 160
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	ea 81       	ldd	r30, Y+2	; 0x02
    212c:	fb 81       	ldd	r31, Y+3	; 0x03
    212e:	80 83       	st	Z, r24
			number /=10;
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	ae 81       	ldd	r26, Y+6	; 0x06
    2136:	bf 81       	ldd	r27, Y+7	; 0x07
    2138:	2a e0       	ldi	r18, 0x0A	; 10
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__divmodsi4>
    2148:	da 01       	movw	r26, r20
    214a:	c9 01       	movw	r24, r18
    214c:	8c 83       	std	Y+4, r24	; 0x04
    214e:	9d 83       	std	Y+5, r25	; 0x05
    2150:	ae 83       	std	Y+6, r26	; 0x06
    2152:	bf 83       	std	Y+7, r27	; 0x07
	*buff = '\0';
	if (number == 0){
		*--buff = '0';
	}
	else {
		while(number>0)
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	ae 81       	ldd	r26, Y+6	; 0x06
    215a:	bf 81       	ldd	r27, Y+7	; 0x07
    215c:	18 16       	cp	r1, r24
    215e:	19 06       	cpc	r1, r25
    2160:	1a 06       	cpc	r1, r26
    2162:	1b 06       	cpc	r1, r27
    2164:	5c f2       	brlt	.-106    	; 0x20fc <LCD_displayNumber+0x7e>
		{
			*--buff = "0123456789"[number %10]; /* 10 for decimal */
			number /=10;
		}
	}
	if(negtive_flag){
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	88 23       	and	r24, r24
    216a:	51 f0       	breq	.+20     	; 0x2180 <LCD_displayNumber+0x102>
		negtive_flag=0;
    216c:	19 82       	std	Y+1, r1	; 0x01
		*--buff = '-' ;
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	9b 83       	std	Y+3, r25	; 0x03
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	ea 81       	ldd	r30, Y+2	; 0x02
    217a:	fb 81       	ldd	r31, Y+3	; 0x03
    217c:	8d e2       	ldi	r24, 0x2D	; 45
    217e:	80 83       	st	Z, r24
	}
	LCD_displayString(buff);
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayString>
	/*another solution*/
	char buff[11];
	itoa(number,buff,10);
	LCD_displayString(buff);
#endif
}
    2188:	27 96       	adiw	r28, 0x07	; 7
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <LCD_displayFloatNumber>:
void LCD_displayFloatNumber(float32 data,uint8 num_pre)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	61 97       	sbiw	r28, 0x11	; 17
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	6d 87       	std	Y+13, r22	; 0x0d
    21b0:	7e 87       	std	Y+14, r23	; 0x0e
    21b2:	8f 87       	std	Y+15, r24	; 0x0f
    21b4:	98 8b       	std	Y+16, r25	; 0x10
    21b6:	49 8b       	std	Y+17, r20	; 0x11
	static uint8 str[11];   //max number entered to display on lcd
	uint8 *buff = &str[10], p_counter=num_pre ,negtive_flag=0;
    21b8:	86 e9       	ldi	r24, 0x96	; 150
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	9c 87       	std	Y+12, r25	; 0x0c
    21be:	8b 87       	std	Y+11, r24	; 0x0b
    21c0:	89 89       	ldd	r24, Y+17	; 0x11
    21c2:	8a 87       	std	Y+10, r24	; 0x0a
    21c4:	19 86       	std	Y+9, r1	; 0x09
	float32 pre; uint32 p=1;            /* String to hold the ascii result */
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 e0       	ldi	r26, 0x00	; 0
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	ab 83       	std	Y+3, r26	; 0x03
    21d4:	bc 83       	std	Y+4, r27	; 0x04
    *buff = '\0';
    21d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    21d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    21da:	10 82       	st	Z, r1

    if (data<0){
    21dc:	6d 85       	ldd	r22, Y+13	; 0x0d
    21de:	7e 85       	ldd	r23, Y+14	; 0x0e
    21e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e2:	98 89       	ldd	r25, Y+16	; 0x10
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	0c f5       	brge	.+66     	; 0x2236 <LCD_displayFloatNumber+0x9c>
		negtive_flag=1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	89 87       	std	Y+9, r24	; 0x09
		data=-data  ;
    21f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fc:	af 85       	ldd	r26, Y+15	; 0x0f
    21fe:	b8 89       	ldd	r27, Y+16	; 0x10
    2200:	b0 58       	subi	r27, 0x80	; 128
    2202:	8d 87       	std	Y+13, r24	; 0x0d
    2204:	9e 87       	std	Y+14, r25	; 0x0e
    2206:	af 87       	std	Y+15, r26	; 0x0f
    2208:	b8 8b       	std	Y+16, r27	; 0x10
    220a:	15 c0       	rjmp	.+42     	; 0x2236 <LCD_displayFloatNumber+0x9c>
	}

    for(; p_counter>0; p_counter--){
		p*=10;
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	ab 81       	ldd	r26, Y+3	; 0x03
    2212:	bc 81       	ldd	r27, Y+4	; 0x04
    2214:	2a e0       	ldi	r18, 0x0A	; 10
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__mulsi3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	9a 83       	std	Y+2, r25	; 0x02
    222c:	ab 83       	std	Y+3, r26	; 0x03
    222e:	bc 83       	std	Y+4, r27	; 0x04
    if (data<0){
		negtive_flag=1;
		data=-data  ;
	}

    for(; p_counter>0; p_counter--){
    2230:	8a 85       	ldd	r24, Y+10	; 0x0a
    2232:	81 50       	subi	r24, 0x01	; 1
    2234:	8a 87       	std	Y+10, r24	; 0x0a
    2236:	8a 85       	ldd	r24, Y+10	; 0x0a
    2238:	88 23       	and	r24, r24
    223a:	41 f7       	brne	.-48     	; 0x220c <LCD_displayFloatNumber+0x72>
		p*=10;
    }
	pre=data-(int)data;
    223c:	6d 85       	ldd	r22, Y+13	; 0x0d
    223e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2240:	8f 85       	ldd	r24, Y+15	; 0x0f
    2242:	98 89       	ldd	r25, Y+16	; 0x10
    2244:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	aa 27       	eor	r26, r26
    224e:	97 fd       	sbrc	r25, 7
    2250:	a0 95       	com	r26
    2252:	ba 2f       	mov	r27, r26
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    225c:	9b 01       	movw	r18, r22
    225e:	ac 01       	movw	r20, r24
    2260:	6d 85       	ldd	r22, Y+13	; 0x0d
    2262:	7e 85       	ldd	r23, Y+14	; 0x0e
    2264:	8f 85       	ldd	r24, Y+15	; 0x0f
    2266:	98 89       	ldd	r25, Y+16	; 0x10
    2268:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	af 83       	std	Y+7, r26	; 0x07
    2276:	b8 87       	std	Y+8, r27	; 0x08
	pre*=p;
    2278:	69 81       	ldd	r22, Y+1	; 0x01
    227a:	7a 81       	ldd	r23, Y+2	; 0x02
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2284:	9b 01       	movw	r18, r22
    2286:	ac 01       	movw	r20, r24
    2288:	6d 81       	ldd	r22, Y+5	; 0x05
    228a:	7e 81       	ldd	r23, Y+6	; 0x06
    228c:	8f 81       	ldd	r24, Y+7	; 0x07
    228e:	98 85       	ldd	r25, Y+8	; 0x08
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	af 83       	std	Y+7, r26	; 0x07
    229e:	b8 87       	std	Y+8, r27	; 0x08

	if (data == 0){
    22a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    22a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	98 89       	ldd	r25, Y+16	; 0x10
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	69 f0       	breq	.+26     	; 0x22d2 <LCD_displayFloatNumber+0x138>
    22b8:	5a c0       	rjmp	.+180    	; 0x236e <LCD_displayFloatNumber+0x1d4>
		while(num_pre>0){
			*--buff = '0';
    22ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    22bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9c 87       	std	Y+12, r25	; 0x0c
    22c2:	8b 87       	std	Y+11, r24	; 0x0b
    22c4:	eb 85       	ldd	r30, Y+11	; 0x0b
    22c6:	fc 85       	ldd	r31, Y+12	; 0x0c
    22c8:	80 e3       	ldi	r24, 0x30	; 48
    22ca:	80 83       	st	Z, r24
			num_pre--;
    22cc:	89 89       	ldd	r24, Y+17	; 0x11
    22ce:	81 50       	subi	r24, 0x01	; 1
    22d0:	89 8b       	std	Y+17, r24	; 0x11
    }
	pre=data-(int)data;
	pre*=p;

	if (data == 0){
		while(num_pre>0){
    22d2:	89 89       	ldd	r24, Y+17	; 0x11
    22d4:	88 23       	and	r24, r24
    22d6:	89 f7       	brne	.-30     	; 0x22ba <LCD_displayFloatNumber+0x120>
			*--buff = '0';
			num_pre--;
		}
		*--buff = ',';
    22d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    22da:	9c 85       	ldd	r25, Y+12	; 0x0c
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	9c 87       	std	Y+12, r25	; 0x0c
    22e0:	8b 87       	std	Y+11, r24	; 0x0b
    22e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    22e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    22e6:	8c e2       	ldi	r24, 0x2C	; 44
    22e8:	80 83       	st	Z, r24
		*--buff = '0';
    22ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	9c 87       	std	Y+12, r25	; 0x0c
    22f2:	8b 87       	std	Y+11, r24	; 0x0b
    22f4:	eb 85       	ldd	r30, Y+11	; 0x0b
    22f6:	fc 85       	ldd	r31, Y+12	; 0x0c
    22f8:	80 e3       	ldi	r24, 0x30	; 48
    22fa:	80 83       	st	Z, r24
    22fc:	b2 c0       	rjmp	.+356    	; 0x2462 <LCD_displayFloatNumber+0x2c8>
	}
	else {
		while((int)pre>0)
		{
			*--buff = "0123456789"[(int)pre %10]; /* 10 for decimal */
    22fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2300:	9c 85       	ldd	r25, Y+12	; 0x0c
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9c 87       	std	Y+12, r25	; 0x0c
    2306:	8b 87       	std	Y+11, r24	; 0x0b
    2308:	6d 81       	ldd	r22, Y+5	; 0x05
    230a:	7e 81       	ldd	r23, Y+6	; 0x06
    230c:	8f 81       	ldd	r24, Y+7	; 0x07
    230e:	98 85       	ldd	r25, Y+8	; 0x08
    2310:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	2a e0       	ldi	r18, 0x0A	; 10
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	b9 01       	movw	r22, r18
    231e:	0e 94 6f 15 	call	0x2ade	; 0x2ade <__divmodhi4>
    2322:	fc 01       	movw	r30, r24
    2324:	e0 5a       	subi	r30, 0xA0	; 160
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 81       	ld	r24, Z
    232a:	eb 85       	ldd	r30, Y+11	; 0x0b
    232c:	fc 85       	ldd	r31, Y+12	; 0x0c
    232e:	80 83       	st	Z, r24
			pre =(int)pre/10;
    2330:	6d 81       	ldd	r22, Y+5	; 0x05
    2332:	7e 81       	ldd	r23, Y+6	; 0x06
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	98 85       	ldd	r25, Y+8	; 0x08
    2338:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	2a e0       	ldi	r18, 0x0A	; 10
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	b9 01       	movw	r22, r18
    2346:	0e 94 6f 15 	call	0x2ade	; 0x2ade <__divmodhi4>
    234a:	cb 01       	movw	r24, r22
    234c:	aa 27       	eor	r26, r26
    234e:	97 fd       	sbrc	r25, 7
    2350:	a0 95       	com	r26
    2352:	ba 2f       	mov	r27, r26
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	af 83       	std	Y+7, r26	; 0x07
    2366:	b8 87       	std	Y+8, r27	; 0x08
			num_pre--;
    2368:	89 89       	ldd	r24, Y+17	; 0x11
    236a:	81 50       	subi	r24, 0x01	; 1
    236c:	89 8b       	std	Y+17, r24	; 0x11
		}
		*--buff = ',';
		*--buff = '0';
	}
	else {
		while((int)pre>0)
    236e:	6d 81       	ldd	r22, Y+5	; 0x05
    2370:	7e 81       	ldd	r23, Y+6	; 0x06
    2372:	8f 81       	ldd	r24, Y+7	; 0x07
    2374:	98 85       	ldd	r25, Y+8	; 0x08
    2376:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	18 16       	cp	r1, r24
    2380:	19 06       	cpc	r1, r25
    2382:	0c f4       	brge	.+2      	; 0x2386 <LCD_displayFloatNumber+0x1ec>
    2384:	bc cf       	rjmp	.-136    	; 0x22fe <LCD_displayFloatNumber+0x164>
		{
			*--buff = "0123456789"[(int)pre %10]; /* 10 for decimal */
			pre =(int)pre/10;
			num_pre--;
		}
		if(num_pre>0){
    2386:	89 89       	ldd	r24, Y+17	; 0x11
    2388:	88 23       	and	r24, r24
    238a:	61 f0       	breq	.+24     	; 0x23a4 <LCD_displayFloatNumber+0x20a>
			*--buff = '0';
    238c:	8b 85       	ldd	r24, Y+11	; 0x0b
    238e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9c 87       	std	Y+12, r25	; 0x0c
    2394:	8b 87       	std	Y+11, r24	; 0x0b
    2396:	eb 85       	ldd	r30, Y+11	; 0x0b
    2398:	fc 85       	ldd	r31, Y+12	; 0x0c
    239a:	80 e3       	ldi	r24, 0x30	; 48
    239c:	80 83       	st	Z, r24
			num_pre--;
    239e:	89 89       	ldd	r24, Y+17	; 0x11
    23a0:	81 50       	subi	r24, 0x01	; 1
    23a2:	89 8b       	std	Y+17, r24	; 0x11
		}
		*--buff = ',';
    23a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    23a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	9c 87       	std	Y+12, r25	; 0x0c
    23ac:	8b 87       	std	Y+11, r24	; 0x0b
    23ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    23b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    23b2:	8c e2       	ldi	r24, 0x2C	; 44
    23b4:	80 83       	st	Z, r24
		if((int)data==0)
    23b6:	6d 85       	ldd	r22, Y+13	; 0x0d
    23b8:	7e 85       	ldd	r23, Y+14	; 0x0e
    23ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    23bc:	98 89       	ldd	r25, Y+16	; 0x10
    23be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	09 f0       	breq	.+2      	; 0x23cc <LCD_displayFloatNumber+0x232>
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_displayFloatNumber+0x2b0>
			*--buff = '0';
    23cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9c 87       	std	Y+12, r25	; 0x0c
    23d4:	8b 87       	std	Y+11, r24	; 0x0b
    23d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    23d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    23da:	80 e3       	ldi	r24, 0x30	; 48
    23dc:	80 83       	st	Z, r24
    23de:	35 c0       	rjmp	.+106    	; 0x244a <LCD_displayFloatNumber+0x2b0>
		while((int)data>0)
		{
			*--buff = "0123456789"[(int)data %10]; /* 10 for decimal */
    23e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9c 87       	std	Y+12, r25	; 0x0c
    23e8:	8b 87       	std	Y+11, r24	; 0x0b
    23ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    23ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    23ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f0:	98 89       	ldd	r25, Y+16	; 0x10
    23f2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	2a e0       	ldi	r18, 0x0A	; 10
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	b9 01       	movw	r22, r18
    2400:	0e 94 6f 15 	call	0x2ade	; 0x2ade <__divmodhi4>
    2404:	fc 01       	movw	r30, r24
    2406:	e0 5a       	subi	r30, 0xA0	; 160
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	eb 85       	ldd	r30, Y+11	; 0x0b
    240e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2410:	80 83       	st	Z, r24
			data =(int)data/10;
    2412:	6d 85       	ldd	r22, Y+13	; 0x0d
    2414:	7e 85       	ldd	r23, Y+14	; 0x0e
    2416:	8f 85       	ldd	r24, Y+15	; 0x0f
    2418:	98 89       	ldd	r25, Y+16	; 0x10
    241a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	2a e0       	ldi	r18, 0x0A	; 10
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	b9 01       	movw	r22, r18
    2428:	0e 94 6f 15 	call	0x2ade	; 0x2ade <__divmodhi4>
    242c:	cb 01       	movw	r24, r22
    242e:	aa 27       	eor	r26, r26
    2430:	97 fd       	sbrc	r25, 7
    2432:	a0 95       	com	r26
    2434:	ba 2f       	mov	r27, r26
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8d 87       	std	Y+13, r24	; 0x0d
    2444:	9e 87       	std	Y+14, r25	; 0x0e
    2446:	af 87       	std	Y+15, r26	; 0x0f
    2448:	b8 8b       	std	Y+16, r27	; 0x10
			num_pre--;
		}
		*--buff = ',';
		if((int)data==0)
			*--buff = '0';
		while((int)data>0)
    244a:	6d 85       	ldd	r22, Y+13	; 0x0d
    244c:	7e 85       	ldd	r23, Y+14	; 0x0e
    244e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2450:	98 89       	ldd	r25, Y+16	; 0x10
    2452:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	18 16       	cp	r1, r24
    245c:	19 06       	cpc	r1, r25
    245e:	0c f4       	brge	.+2      	; 0x2462 <LCD_displayFloatNumber+0x2c8>
    2460:	bf cf       	rjmp	.-130    	; 0x23e0 <LCD_displayFloatNumber+0x246>
			*--buff = "0123456789"[(int)data %10]; /* 10 for decimal */
			data =(int)data/10;
		}
	}

	if(negtive_flag){
    2462:	89 85       	ldd	r24, Y+9	; 0x09
    2464:	88 23       	and	r24, r24
    2466:	51 f0       	breq	.+20     	; 0x247c <LCD_displayFloatNumber+0x2e2>
		negtive_flag=0;
    2468:	19 86       	std	Y+9, r1	; 0x09
		*--buff = '-';
    246a:	8b 85       	ldd	r24, Y+11	; 0x0b
    246c:	9c 85       	ldd	r25, Y+12	; 0x0c
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9c 87       	std	Y+12, r25	; 0x0c
    2472:	8b 87       	std	Y+11, r24	; 0x0b
    2474:	eb 85       	ldd	r30, Y+11	; 0x0b
    2476:	fc 85       	ldd	r31, Y+12	; 0x0c
    2478:	8d e2       	ldi	r24, 0x2D	; 45
    247a:	80 83       	st	Z, r24
	}
	LCD_displayString(buff);
    247c:	8b 85       	ldd	r24, Y+11	; 0x0b
    247e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2480:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayString>
}
    2484:	61 96       	adiw	r28, 0x11	; 17
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <LCD_clearScreen>:


void LCD_clearScreen(void)            /*not important */
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_sendCommand>
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <main>:
//flags to avoid overflow by press the buttons in constant temperature and humidity
volatile uint8 in_t_flag=0 ,de_t_flag=0 ,in_h_flag=0 ,de_h_flag=0;


int main(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	////Configurations////
	DELAY_init();
    24b2:	0e 94 55 08 	call	0x10aa	; 0x10aa <DELAY_init>
#ifdef LCD_DIS
	LCD_init();
#else
	seven_seg_init();     //initialize 7 segments
    24b6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <seven_seg_init>
#endif
	switches_init();      //initialize switches
    24ba:	0e 94 9c 14 	call	0x2938	; 0x2938 <switches_init>
	actuaters_init();     //initialize fan ,heater and buzzer
    24be:	0e 94 a5 07 	call	0xf4a	; 0xf4a <actuaters_init>
	sensors_init();       //from temperature library
    24c2:	0e 94 19 13 	call	0x2632	; 0x2632 <sensors_init>
		else {
			seg_display4( 88,  88,88 , 88 );
		}
		DELAY_ms(500);
		*/
		actual_temp =    temp_sensor_read(0);
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	0e 94 2a 13 	call	0x2654	; 0x2654 <temp_sensor_read>
    24cc:	80 93 97 01 	sts	0x0197, r24
		actual_humidity= hum_sensor_read(1);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	0e 94 4b 13 	call	0x2696	; 0x2696 <hum_sensor_read>
    24d6:	80 93 98 01 	sts	0x0198, r24

		////////////////////////////////////////
		if(set_temp_pres){
    24da:	80 91 9f 01 	lds	r24, 0x019F
    24de:	88 23       	and	r24, r24
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <main+0x3a>
    24e2:	4a c0       	rjmp	.+148    	; 0x2578 <main+0xce>
			if(PIND&(1<<0)){
    24e4:	e0 e3       	ldi	r30, 0x30	; 48
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	81 70       	andi	r24, 0x01	; 1
    24f0:	90 70       	andi	r25, 0x00	; 0
    24f2:	88 23       	and	r24, r24
    24f4:	d1 f0       	breq	.+52     	; 0x252a <main+0x80>
				DELAY_ms(30);
    24f6:	8e e1       	ldi	r24, 0x1E	; 30
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
				if(PIND&(1<<0)){      //increase temperature pin
    24fe:	e0 e3       	ldi	r30, 0x30	; 48
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	88 2f       	mov	r24, r24
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	81 70       	andi	r24, 0x01	; 1
    250a:	90 70       	andi	r25, 0x00	; 0
    250c:	88 23       	and	r24, r24
    250e:	79 f0       	breq	.+30     	; 0x252e <main+0x84>
					if(in_t_flag==0){ // to avoid overflow
    2510:	80 91 99 01 	lds	r24, 0x0199
    2514:	88 23       	and	r24, r24
    2516:	59 f4       	brne	.+22     	; 0x252e <main+0x84>
						const_temp++;  //increase constant temperature
    2518:	80 91 73 01 	lds	r24, 0x0173
    251c:	8f 5f       	subi	r24, 0xFF	; 255
    251e:	80 93 73 01 	sts	0x0173, r24
						in_t_flag=1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	80 93 99 01 	sts	0x0199, r24
    2528:	02 c0       	rjmp	.+4      	; 0x252e <main+0x84>
					}
				}
			}
			else in_t_flag=0;
    252a:	10 92 99 01 	sts	0x0199, r1
			if(PIND&(1<<1)){ 		//decrease temperature pin
    252e:	e0 e3       	ldi	r30, 0x30	; 48
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	82 70       	andi	r24, 0x02	; 2
    253a:	90 70       	andi	r25, 0x00	; 0
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	d1 f0       	breq	.+52     	; 0x2574 <main+0xca>
				DELAY_ms(30);
    2540:	8e e1       	ldi	r24, 0x1E	; 30
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
				if(PIND&(1<<1)){
    2548:	e0 e3       	ldi	r30, 0x30	; 48
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	82 70       	andi	r24, 0x02	; 2
    2554:	90 70       	andi	r25, 0x00	; 0
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	79 f0       	breq	.+30     	; 0x2578 <main+0xce>
					if(de_t_flag==0){
    255a:	80 91 9a 01 	lds	r24, 0x019A
    255e:	88 23       	and	r24, r24
    2560:	59 f4       	brne	.+22     	; 0x2578 <main+0xce>
						const_temp--;  //decrease constant temperature
    2562:	80 91 73 01 	lds	r24, 0x0173
    2566:	81 50       	subi	r24, 0x01	; 1
    2568:	80 93 73 01 	sts	0x0173, r24
						de_t_flag=1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	80 93 9a 01 	sts	0x019A, r24
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <main+0xce>
					}
				}
			}
			else de_t_flag=0;
    2574:	10 92 9a 01 	sts	0x019A, r1
		}
		//////////////////////////////
		if(set_hum_pres){
    2578:	80 91 a0 01 	lds	r24, 0x01A0
    257c:	88 23       	and	r24, r24
    257e:	09 f4       	brne	.+2      	; 0x2582 <main+0xd8>
    2580:	4a c0       	rjmp	.+148    	; 0x2616 <main+0x16c>
			if(PIND&(1<<4)){   //increase humidity pin
    2582:	e0 e3       	ldi	r30, 0x30	; 48
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	80 71       	andi	r24, 0x10	; 16
    258e:	90 70       	andi	r25, 0x00	; 0
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	d1 f0       	breq	.+52     	; 0x25c8 <main+0x11e>
				DELAY_ms(30);
    2594:	8e e1       	ldi	r24, 0x1E	; 30
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
				if(PIND&(1<<4)){
    259c:	e0 e3       	ldi	r30, 0x30	; 48
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	80 71       	andi	r24, 0x10	; 16
    25a8:	90 70       	andi	r25, 0x00	; 0
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	79 f0       	breq	.+30     	; 0x25cc <main+0x122>
					if(in_h_flag==0){
    25ae:	80 91 9b 01 	lds	r24, 0x019B
    25b2:	88 23       	and	r24, r24
    25b4:	59 f4       	brne	.+22     	; 0x25cc <main+0x122>
						const_hum++;   //increase constant humidity
    25b6:	80 91 74 01 	lds	r24, 0x0174
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	80 93 74 01 	sts	0x0174, r24
						in_h_flag=1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 93 9b 01 	sts	0x019B, r24
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <main+0x122>
					}
				}
			}
			else in_h_flag=0;
    25c8:	10 92 9b 01 	sts	0x019B, r1

			if(PIND&(1<<5)){    //decrease humidity pin
    25cc:	e0 e3       	ldi	r30, 0x30	; 48
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	80 72       	andi	r24, 0x20	; 32
    25d8:	90 70       	andi	r25, 0x00	; 0
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	d1 f0       	breq	.+52     	; 0x2612 <main+0x168>
				DELAY_ms(30);
    25de:	8e e1       	ldi	r24, 0x1E	; 30
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
				if(PIND&(1<<5)){
    25e6:	e0 e3       	ldi	r30, 0x30	; 48
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	80 72       	andi	r24, 0x20	; 32
    25f2:	90 70       	andi	r25, 0x00	; 0
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	79 f0       	breq	.+30     	; 0x2616 <main+0x16c>
					if(de_h_flag==0){
    25f8:	80 91 9c 01 	lds	r24, 0x019C
    25fc:	88 23       	and	r24, r24
    25fe:	59 f4       	brne	.+22     	; 0x2616 <main+0x16c>
						const_hum--;   //decrease constant humidity
    2600:	80 91 74 01 	lds	r24, 0x0174
    2604:	81 50       	subi	r24, 0x01	; 1
    2606:	80 93 74 01 	sts	0x0174, r24
						de_h_flag=1;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	80 93 9c 01 	sts	0x019C, r24
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <main+0x16c>
					}
				}
			}
			else de_h_flag=0;
    2612:	10 92 9c 01 	sts	0x019C, r1
		}
#ifdef LCD_DIS
		LCD_displayNumber(actual_humidity);  LCD_displayNumber(const_hum);
		LCD_displayNumber(actual_temp);      LCD_displayNumber(const_temp);
#else
		seg_display4(const_temp ,actual_temp, const_hum ,actual_humidity );
    2616:	80 91 73 01 	lds	r24, 0x0173
    261a:	90 91 97 01 	lds	r25, 0x0197
    261e:	20 91 74 01 	lds	r18, 0x0174
    2622:	30 91 98 01 	lds	r19, 0x0198
    2626:	69 2f       	mov	r22, r25
    2628:	42 2f       	mov	r20, r18
    262a:	23 2f       	mov	r18, r19
    262c:	0e 94 bd 13 	call	0x277a	; 0x277a <seg_display4>
    2630:	4a cf       	rjmp	.-364    	; 0x24c6 <main+0x1c>

00002632 <sensors_init>:
#include "sensors.h"

#include "adc.h"

void sensors_init(){
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <sensors_init+0x6>
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
	ADC_ConfigType myADC_COn={AREF ,Div_Fac_8};
    263c:	19 82       	std	Y+1, r1	; 0x01
    263e:	83 e0       	ldi	r24, 0x03	; 3
    2640:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&myADC_COn);
    2642:	ce 01       	movw	r24, r28
    2644:	01 96       	adiw	r24, 0x01	; 1
    2646:	0e 94 0e 08 	call	0x101c	; 0x101c <ADC_init>
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <temp_sensor_read>:
uint8 temp_sensor_read(uint8 ch)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <temp_sensor_read+0x6>
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 x= (ADC_readChannel(ch) * 500/1023);
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	0e 94 2c 08 	call	0x1058	; 0x1058 <ADC_readChannel>
    2666:	9c 01       	movw	r18, r24
    2668:	84 ef       	ldi	r24, 0xF4	; 244
    266a:	91 e0       	ldi	r25, 0x01	; 1
    266c:	ac 01       	movw	r20, r24
    266e:	24 9f       	mul	r18, r20
    2670:	c0 01       	movw	r24, r0
    2672:	25 9f       	mul	r18, r21
    2674:	90 0d       	add	r25, r0
    2676:	34 9f       	mul	r19, r20
    2678:	90 0d       	add	r25, r0
    267a:	11 24       	eor	r1, r1
    267c:	2f ef       	ldi	r18, 0xFF	; 255
    267e:	33 e0       	ldi	r19, 0x03	; 3
    2680:	b9 01       	movw	r22, r18
    2682:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodhi4>
    2686:	cb 01       	movw	r24, r22
    2688:	89 83       	std	Y+1, r24	; 0x01
	return x; /// return local
    268a:	89 81       	ldd	r24, Y+1	; 0x01
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <hum_sensor_read>:

uint8 hum_sensor_read(uint8 ch)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <hum_sensor_read+0x6>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 x= (ADC_readChannel(ch) * 500/1023);
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	0e 94 2c 08 	call	0x1058	; 0x1058 <ADC_readChannel>
    26a8:	9c 01       	movw	r18, r24
    26aa:	84 ef       	ldi	r24, 0xF4	; 244
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	ac 01       	movw	r20, r24
    26b0:	24 9f       	mul	r18, r20
    26b2:	c0 01       	movw	r24, r0
    26b4:	25 9f       	mul	r18, r21
    26b6:	90 0d       	add	r25, r0
    26b8:	34 9f       	mul	r19, r20
    26ba:	90 0d       	add	r25, r0
    26bc:	11 24       	eor	r1, r1
    26be:	2f ef       	ldi	r18, 0xFF	; 255
    26c0:	33 e0       	ldi	r19, 0x03	; 3
    26c2:	b9 01       	movw	r22, r18
    26c4:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodhi4>
    26c8:	cb 01       	movw	r24, r22
    26ca:	89 83       	std	Y+1, r24	; 0x01
	return x; /// return local
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <seven_seg_init>:

enum {
	seg1,seg2,seg3,seg4,seg5,seg6,seg7,seg8
};

void seven_seg_init(){
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	00 d0       	rcall	.+0      	; 0x26de <seven_seg_init+0x6>
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62

	SEG_DATA_PORT_DIR  |= 0x0F;      //set 4pins(0,1,2,3) of data as output
    26e2:	a4 e3       	ldi	r26, 0x34	; 52
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e4 e3       	ldi	r30, 0x34	; 52
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	8f 60       	ori	r24, 0x0F	; 15
    26ee:	8c 93       	st	X, r24
	SEG_DATA_PORT_OUT  &=~0x0F;      //out 0 in the first
    26f0:	a5 e3       	ldi	r26, 0x35	; 53
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	e5 e3       	ldi	r30, 0x35	; 53
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	80 7f       	andi	r24, 0xF0	; 240
    26fc:	8c 93       	st	X, r24

	SEG_CTRL_PORT_DIR  |= SEGS_PINS;     //set control port output
    26fe:	e7 e3       	ldi	r30, 0x37	; 55
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	e7 e3       	ldi	r30, 0x37	; 55
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	8f ef       	ldi	r24, 0xFF	; 255
    270a:	80 83       	st	Z, r24
#if(TYPE_OF_SEGMENTS== COMMON_ANODE)
	SEG_CTRL_PORT_OUT  &=~SEGS_PINS;      //out 0 in the first
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT  |= SEGS_PINS;      //out 0 in the first  ////
    270c:	e8 e3       	ldi	r30, 0x38	; 56
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	e8 e3       	ldi	r30, 0x38	; 56
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	8f ef       	ldi	r24, 0xFF	; 255
    2718:	80 83       	st	Z, r24
#endif

}
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <seg_display_one>:

/*display in one segment*/
void seg_display_one(uint8  number , uint8 seg_place )
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	00 d0       	rcall	.+0      	; 0x272a <seg_display_one+0x6>
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	6a 83       	std	Y+2, r22	; 0x02
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (SEG_CTRL_PORT_OUT& SEGMENTS_STATUS) | (1<<seg_place);   //place to display
#elif(TYPE_OF_SEGMENTS == COMMON_CATHODE)
	SEG_CTRL_PORT_OUT =  (SEG_CTRL_PORT_OUT|SEGMENTS_STATUS)& (~(1<<seg_place));   //place to display
    2732:	a8 e3       	ldi	r26, 0x38	; 56
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e8 e3       	ldi	r30, 0x38	; 56
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	48 2f       	mov	r20, r24
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	02 2e       	mov	r0, r18
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <seg_display_one+0x2c>
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	0a 94       	dec	r0
    2752:	e2 f7       	brpl	.-8      	; 0x274c <seg_display_one+0x28>
    2754:	80 95       	com	r24
    2756:	84 23       	and	r24, r20
    2758:	8c 93       	st	X, r24
#endif
	SEG_DATA_PORT_OUT = (SEG_DATA_PORT_OUT&0xf0)|(number&0x0f); //insert num in data port
    275a:	a5 e3       	ldi	r26, 0x35	; 53
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e5 e3       	ldi	r30, 0x35	; 53
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	98 2f       	mov	r25, r24
    2766:	90 7f       	andi	r25, 0xF0	; 240
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	8f 70       	andi	r24, 0x0F	; 15
    276c:	89 2b       	or	r24, r25
    276e:	8c 93       	st	X, r24
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <seg_display4>:

//////////////////////////////////////////////
/*display in multi segment*/
#if (N_OF_SEGMENTS == 8)
void seg_display4(uint8 number1 ,uint8 number2 ,uint8 number3, uint8 number4)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <seg_display4+0x6>
    2780:	00 d0       	rcall	.+0      	; 0x2782 <seg_display4+0x8>
    2782:	0f 92       	push	r0
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	8a 83       	std	Y+2, r24	; 0x02
    278a:	6b 83       	std	Y+3, r22	; 0x03
    278c:	4c 83       	std	Y+4, r20	; 0x04
    278e:	2d 83       	std	Y+5, r18	; 0x05
	uint8 temp ;              //just variable
	temp = number1 % 10;   //to get fist num.
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9a e0       	ldi	r25, 0x0A	; 10
    2794:	69 2f       	mov	r22, r25
    2796:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodqi4>
    279a:	89 2f       	mov	r24, r25
    279c:	89 83       	std	Y+1, r24	; 0x01
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (1<< seg2);   //place to display
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT = ~(1<< seg2);   //place to display
    279e:	e8 e3       	ldi	r30, 0x38	; 56
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	8d ef       	ldi	r24, 0xFD	; 253
    27a4:	80 83       	st	Z, r24
#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f); //insert num in data port
    27a6:	a5 e3       	ldi	r26, 0x35	; 53
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e5 e3       	ldi	r30, 0x35	; 53
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	98 2f       	mov	r25, r24
    27b2:	90 7f       	andi	r25, 0xF0	; 240
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	8f 70       	andi	r24, 0x0F	; 15
    27b8:	89 2b       	or	r24, r25
    27ba:	8c 93       	st	X, r24
	DELAY_ms(delay_between_segments_ms);                  //dalay
    27bc:	85 e0       	ldi	r24, 0x05	; 5
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	temp = number1 / 10;         //to get fist num.
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	9a e0       	ldi	r25, 0x0A	; 10
    27c8:	69 2f       	mov	r22, r25
    27ca:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodqi4>
    27ce:	89 83       	std	Y+1, r24	; 0x01
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (1<<seg1);         //place to display
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT = ~(1<< seg1);     //place to display
    27d0:	e8 e3       	ldi	r30, 0x38	; 56
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	8e ef       	ldi	r24, 0xFE	; 254
    27d6:	80 83       	st	Z, r24
#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);  //insert num in data port
    27d8:	a5 e3       	ldi	r26, 0x35	; 53
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e5 e3       	ldi	r30, 0x35	; 53
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	98 2f       	mov	r25, r24
    27e4:	90 7f       	andi	r25, 0xF0	; 240
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	8f 70       	andi	r24, 0x0F	; 15
    27ea:	89 2b       	or	r24, r25
    27ec:	8c 93       	st	X, r24
	DELAY_ms(delay_between_segments_ms);
    27ee:	85 e0       	ldi	r24, 0x05	; 5
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	temp = number2 % 10;
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9a e0       	ldi	r25, 0x0A	; 10
    27fa:	69 2f       	mov	r22, r25
    27fc:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodqi4>
    2800:	89 2f       	mov	r24, r25
    2802:	89 83       	std	Y+1, r24	; 0x01
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (1<<seg4);         //place to display
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT = ~(1<< seg4);     //place to display
    2804:	e8 e3       	ldi	r30, 0x38	; 56
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	87 ef       	ldi	r24, 0xF7	; 247
    280a:	80 83       	st	Z, r24
#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    280c:	a5 e3       	ldi	r26, 0x35	; 53
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e5 e3       	ldi	r30, 0x35	; 53
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	98 2f       	mov	r25, r24
    2818:	90 7f       	andi	r25, 0xF0	; 240
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	8f 70       	andi	r24, 0x0F	; 15
    281e:	89 2b       	or	r24, r25
    2820:	8c 93       	st	X, r24
	DELAY_ms(delay_between_segments_ms);
    2822:	85 e0       	ldi	r24, 0x05	; 5
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	temp = number2 / 10;
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9a e0       	ldi	r25, 0x0A	; 10
    282e:	69 2f       	mov	r22, r25
    2830:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodqi4>
    2834:	89 83       	std	Y+1, r24	; 0x01
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (1<<seg3);         //place to display
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT = ~(1<< seg3);     //place to display
    2836:	e8 e3       	ldi	r30, 0x38	; 56
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	8b ef       	ldi	r24, 0xFB	; 251
    283c:	80 83       	st	Z, r24
#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    283e:	a5 e3       	ldi	r26, 0x35	; 53
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e5 e3       	ldi	r30, 0x35	; 53
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	98 2f       	mov	r25, r24
    284a:	90 7f       	andi	r25, 0xF0	; 240
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	8f 70       	andi	r24, 0x0F	; 15
    2850:	89 2b       	or	r24, r25
    2852:	8c 93       	st	X, r24
	DELAY_ms(delay_between_segments_ms);
    2854:	85 e0       	ldi	r24, 0x05	; 5
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	////////////////////////////////////////////

	temp = number3 % 10;
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	9a e0       	ldi	r25, 0x0A	; 10
    2860:	69 2f       	mov	r22, r25
    2862:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodqi4>
    2866:	89 2f       	mov	r24, r25
    2868:	89 83       	std	Y+1, r24	; 0x01
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (1<<seg6);         //place to display
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT = ~(1<< seg6);     //place to display
    286a:	e8 e3       	ldi	r30, 0x38	; 56
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	8f ed       	ldi	r24, 0xDF	; 223
    2870:	80 83       	st	Z, r24
#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    2872:	a5 e3       	ldi	r26, 0x35	; 53
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	e5 e3       	ldi	r30, 0x35	; 53
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	98 2f       	mov	r25, r24
    287e:	90 7f       	andi	r25, 0xF0	; 240
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	8f 70       	andi	r24, 0x0F	; 15
    2884:	89 2b       	or	r24, r25
    2886:	8c 93       	st	X, r24
	DELAY_ms(delay_between_segments_ms);
    2888:	85 e0       	ldi	r24, 0x05	; 5
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	temp = number3 / 10;
    2890:	8c 81       	ldd	r24, Y+4	; 0x04
    2892:	9a e0       	ldi	r25, 0x0A	; 10
    2894:	69 2f       	mov	r22, r25
    2896:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodqi4>
    289a:	89 83       	std	Y+1, r24	; 0x01
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (1<<seg5);         //place to display
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT = ~(1<< seg5);     //place to display
    289c:	e8 e3       	ldi	r30, 0x38	; 56
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	8f ee       	ldi	r24, 0xEF	; 239
    28a2:	80 83       	st	Z, r24
#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    28a4:	a5 e3       	ldi	r26, 0x35	; 53
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e5 e3       	ldi	r30, 0x35	; 53
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	98 2f       	mov	r25, r24
    28b0:	90 7f       	andi	r25, 0xF0	; 240
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	8f 70       	andi	r24, 0x0F	; 15
    28b6:	89 2b       	or	r24, r25
    28b8:	8c 93       	st	X, r24
	DELAY_ms(delay_between_segments_ms);
    28ba:	85 e0       	ldi	r24, 0x05	; 5
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	temp = number4 % 10;
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9a e0       	ldi	r25, 0x0A	; 10
    28c6:	69 2f       	mov	r22, r25
    28c8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodqi4>
    28cc:	89 2f       	mov	r24, r25
    28ce:	89 83       	std	Y+1, r24	; 0x01
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (1<<seg8);         //place to display
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT = ~(1<< seg8);     //place to display
    28d0:	e8 e3       	ldi	r30, 0x38	; 56
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	8f e7       	ldi	r24, 0x7F	; 127
    28d6:	80 83       	st	Z, r24
#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    28d8:	a5 e3       	ldi	r26, 0x35	; 53
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e5 e3       	ldi	r30, 0x35	; 53
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	98 2f       	mov	r25, r24
    28e4:	90 7f       	andi	r25, 0xF0	; 240
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	8f 70       	andi	r24, 0x0F	; 15
    28ea:	89 2b       	or	r24, r25
    28ec:	8c 93       	st	X, r24
	DELAY_ms(delay_between_segments_ms);
    28ee:	85 e0       	ldi	r24, 0x05	; 5
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>

	temp = number4 / 10;
    28f6:	8d 81       	ldd	r24, Y+5	; 0x05
    28f8:	9a e0       	ldi	r25, 0x0A	; 10
    28fa:	69 2f       	mov	r22, r25
    28fc:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__udivmodqi4>
    2900:	89 83       	std	Y+1, r24	; 0x01
#if (TYPE_OF_SEGMENTS == COMMON_ANODE)
	SEG_CTRL_PORT_OUT = (1<<seg7);         //place to display
#elif(TYPE_OF_SEGMENTS== COMMON_CATHODE)
	SEG_CTRL_PORT_OUT = ~(1<< seg7);     //place to display
    2902:	e8 e3       	ldi	r30, 0x38	; 56
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	8f eb       	ldi	r24, 0xBF	; 191
    2908:	80 83       	st	Z, r24
#endif
	SEG_DATA_PORT_OUT=(SEG_DATA_PORT_OUT&0xf0)|(temp&0x0f);
    290a:	a5 e3       	ldi	r26, 0x35	; 53
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e5 e3       	ldi	r30, 0x35	; 53
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	98 2f       	mov	r25, r24
    2916:	90 7f       	andi	r25, 0xF0	; 240
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	8f 70       	andi	r24, 0x0F	; 15
    291c:	89 2b       	or	r24, r25
    291e:	8c 93       	st	X, r24
	DELAY_ms(delay_between_segments_ms);
    2920:	85 e0       	ldi	r24, 0x05	; 5
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	0e 94 67 08 	call	0x10ce	; 0x10ce <DELAY_ms>
}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <switches_init>:
INTERRUPT_Config  myIN0_config={RISING_EDGE, NO_PULL};
INTERRUPT_Config  myIN1_config={RISING_EDGE, NO_PULL};


void switches_init()
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
	sei();
    2940:	78 94       	sei

	DDRD &=0xc0;  //input
    2942:	a1 e3       	ldi	r26, 0x31	; 49
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e1 e3       	ldi	r30, 0x31	; 49
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	80 7c       	andi	r24, 0xC0	; 192
    294e:	8c 93       	st	X, r24

	INT0_Init(& myIN0_config);
    2950:	85 e7       	ldi	r24, 0x75	; 117
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <INT0_Init>
	INT0_CallBack(callBackin0);
    2958:	8b eb       	ldi	r24, 0xBB	; 187
    295a:	94 e1       	ldi	r25, 0x14	; 20
    295c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <INT0_CallBack>

	INT1_Init(& myIN1_config);
    2960:	87 e7       	ldi	r24, 0x77	; 119
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <INT1_Init>
	INT1_CallBack(callBackin1);
    2968:	8c ec       	ldi	r24, 0xCC	; 204
    296a:	94 e1       	ldi	r25, 0x14	; 20
    296c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <INT1_CallBack>
}
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <callBackin0>:


void callBackin0(void){
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
	if(set_temp_pres == 0)
    297e:	80 91 9f 01 	lds	r24, 0x019F
    2982:	88 23       	and	r24, r24
    2984:	21 f4       	brne	.+8      	; 0x298e <callBackin0+0x18>
		set_temp_pres = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	80 93 9f 01 	sts	0x019F, r24
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <callBackin0+0x1c>
	else
		set_temp_pres = 0;
    298e:	10 92 9f 01 	sts	0x019F, r1
}
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <callBackin1>:

void callBackin1(void){
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
	if(set_hum_pres == 0)
    29a0:	80 91 a0 01 	lds	r24, 0x01A0
    29a4:	88 23       	and	r24, r24
    29a6:	21 f4       	brne	.+8      	; 0x29b0 <callBackin1+0x18>
		set_hum_pres = 1;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	80 93 a0 01 	sts	0x01A0, r24
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <callBackin1+0x1c>
	else
		set_hum_pres = 0;
    29b0:	10 92 a0 01 	sts	0x01A0, r1
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <sensors2_init>:
#include "temp_sensor.h"
#include "adc.h"

void sensors2_init(){
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <sensors2_init+0x6>
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
	ADC_ConfigType myADC_COn={AREF ,Div_Fac_8};
    29c4:	19 82       	std	Y+1, r1	; 0x01
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&myADC_COn);
    29ca:	ce 01       	movw	r24, r28
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	0e 94 0e 08 	call	0x101c	; 0x101c <ADC_init>
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <temp2_sensor_read>:

uint8 temp2_sensor_read(uint8 ch)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <temp2_sensor_read+0x6>
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 x= (ADC_readChannel(ch) * 500/1023);
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	0e 94 2c 08 	call	0x1058	; 0x1058 <ADC_readChannel>
    29ee:	9c 01       	movw	r18, r24
    29f0:	84 ef       	ldi	r24, 0xF4	; 244
    29f2:	91 e0       	ldi	r25, 0x01	; 1
    29f4:	ac 01       	movw	r20, r24
    29f6:	24 9f       	mul	r18, r20
    29f8:	c0 01       	movw	r24, r0
    29fa:	25 9f       	mul	r18, r21
    29fc:	90 0d       	add	r25, r0
    29fe:	34 9f       	mul	r19, r20
    2a00:	90 0d       	add	r25, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	2f ef       	ldi	r18, 0xFF	; 255
    2a06:	33 e0       	ldi	r19, 0x03	; 3
    2a08:	b9 01       	movw	r22, r18
    2a0a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodhi4>
    2a0e:	cb 01       	movw	r24, r22
    2a10:	89 83       	std	Y+1, r24	; 0x01
	return x; /// return local
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <hum2_sensor_read>:

uint8 hum2_sensor_read(uint8 ch)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <hum2_sensor_read+0x6>
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 x= (ADC_readChannel(ch) * 500/1023);
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	0e 94 2c 08 	call	0x1058	; 0x1058 <ADC_readChannel>
    2a30:	9c 01       	movw	r18, r24
    2a32:	84 ef       	ldi	r24, 0xF4	; 244
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	ac 01       	movw	r20, r24
    2a38:	24 9f       	mul	r18, r20
    2a3a:	c0 01       	movw	r24, r0
    2a3c:	25 9f       	mul	r18, r21
    2a3e:	90 0d       	add	r25, r0
    2a40:	34 9f       	mul	r19, r20
    2a42:	90 0d       	add	r25, r0
    2a44:	11 24       	eor	r1, r1
    2a46:	2f ef       	ldi	r18, 0xFF	; 255
    2a48:	33 e0       	ldi	r19, 0x03	; 3
    2a4a:	b9 01       	movw	r22, r18
    2a4c:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__udivmodhi4>
    2a50:	cb 01       	movw	r24, r22
    2a52:	89 83       	std	Y+1, r24	; 0x01
	return x; /// return local
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <__mulsi3>:
    2a60:	62 9f       	mul	r22, r18
    2a62:	d0 01       	movw	r26, r0
    2a64:	73 9f       	mul	r23, r19
    2a66:	f0 01       	movw	r30, r0
    2a68:	82 9f       	mul	r24, r18
    2a6a:	e0 0d       	add	r30, r0
    2a6c:	f1 1d       	adc	r31, r1
    2a6e:	64 9f       	mul	r22, r20
    2a70:	e0 0d       	add	r30, r0
    2a72:	f1 1d       	adc	r31, r1
    2a74:	92 9f       	mul	r25, r18
    2a76:	f0 0d       	add	r31, r0
    2a78:	83 9f       	mul	r24, r19
    2a7a:	f0 0d       	add	r31, r0
    2a7c:	74 9f       	mul	r23, r20
    2a7e:	f0 0d       	add	r31, r0
    2a80:	65 9f       	mul	r22, r21
    2a82:	f0 0d       	add	r31, r0
    2a84:	99 27       	eor	r25, r25
    2a86:	72 9f       	mul	r23, r18
    2a88:	b0 0d       	add	r27, r0
    2a8a:	e1 1d       	adc	r30, r1
    2a8c:	f9 1f       	adc	r31, r25
    2a8e:	63 9f       	mul	r22, r19
    2a90:	b0 0d       	add	r27, r0
    2a92:	e1 1d       	adc	r30, r1
    2a94:	f9 1f       	adc	r31, r25
    2a96:	bd 01       	movw	r22, r26
    2a98:	cf 01       	movw	r24, r30
    2a9a:	11 24       	eor	r1, r1
    2a9c:	08 95       	ret

00002a9e <__udivmodqi4>:
    2a9e:	99 1b       	sub	r25, r25
    2aa0:	79 e0       	ldi	r23, 0x09	; 9
    2aa2:	04 c0       	rjmp	.+8      	; 0x2aac <__udivmodqi4_ep>

00002aa4 <__udivmodqi4_loop>:
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	96 17       	cp	r25, r22
    2aa8:	08 f0       	brcs	.+2      	; 0x2aac <__udivmodqi4_ep>
    2aaa:	96 1b       	sub	r25, r22

00002aac <__udivmodqi4_ep>:
    2aac:	88 1f       	adc	r24, r24
    2aae:	7a 95       	dec	r23
    2ab0:	c9 f7       	brne	.-14     	; 0x2aa4 <__udivmodqi4_loop>
    2ab2:	80 95       	com	r24
    2ab4:	08 95       	ret

00002ab6 <__udivmodhi4>:
    2ab6:	aa 1b       	sub	r26, r26
    2ab8:	bb 1b       	sub	r27, r27
    2aba:	51 e1       	ldi	r21, 0x11	; 17
    2abc:	07 c0       	rjmp	.+14     	; 0x2acc <__udivmodhi4_ep>

00002abe <__udivmodhi4_loop>:
    2abe:	aa 1f       	adc	r26, r26
    2ac0:	bb 1f       	adc	r27, r27
    2ac2:	a6 17       	cp	r26, r22
    2ac4:	b7 07       	cpc	r27, r23
    2ac6:	10 f0       	brcs	.+4      	; 0x2acc <__udivmodhi4_ep>
    2ac8:	a6 1b       	sub	r26, r22
    2aca:	b7 0b       	sbc	r27, r23

00002acc <__udivmodhi4_ep>:
    2acc:	88 1f       	adc	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	5a 95       	dec	r21
    2ad2:	a9 f7       	brne	.-22     	; 0x2abe <__udivmodhi4_loop>
    2ad4:	80 95       	com	r24
    2ad6:	90 95       	com	r25
    2ad8:	bc 01       	movw	r22, r24
    2ada:	cd 01       	movw	r24, r26
    2adc:	08 95       	ret

00002ade <__divmodhi4>:
    2ade:	97 fb       	bst	r25, 7
    2ae0:	09 2e       	mov	r0, r25
    2ae2:	07 26       	eor	r0, r23
    2ae4:	0a d0       	rcall	.+20     	; 0x2afa <__divmodhi4_neg1>
    2ae6:	77 fd       	sbrc	r23, 7
    2ae8:	04 d0       	rcall	.+8      	; 0x2af2 <__divmodhi4_neg2>
    2aea:	e5 df       	rcall	.-54     	; 0x2ab6 <__udivmodhi4>
    2aec:	06 d0       	rcall	.+12     	; 0x2afa <__divmodhi4_neg1>
    2aee:	00 20       	and	r0, r0
    2af0:	1a f4       	brpl	.+6      	; 0x2af8 <__divmodhi4_exit>

00002af2 <__divmodhi4_neg2>:
    2af2:	70 95       	com	r23
    2af4:	61 95       	neg	r22
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255

00002af8 <__divmodhi4_exit>:
    2af8:	08 95       	ret

00002afa <__divmodhi4_neg1>:
    2afa:	f6 f7       	brtc	.-4      	; 0x2af8 <__divmodhi4_exit>
    2afc:	90 95       	com	r25
    2afe:	81 95       	neg	r24
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	08 95       	ret

00002b04 <__divmodsi4>:
    2b04:	97 fb       	bst	r25, 7
    2b06:	09 2e       	mov	r0, r25
    2b08:	05 26       	eor	r0, r21
    2b0a:	0e d0       	rcall	.+28     	; 0x2b28 <__divmodsi4_neg1>
    2b0c:	57 fd       	sbrc	r21, 7
    2b0e:	04 d0       	rcall	.+8      	; 0x2b18 <__divmodsi4_neg2>
    2b10:	14 d0       	rcall	.+40     	; 0x2b3a <__udivmodsi4>
    2b12:	0a d0       	rcall	.+20     	; 0x2b28 <__divmodsi4_neg1>
    2b14:	00 1c       	adc	r0, r0
    2b16:	38 f4       	brcc	.+14     	; 0x2b26 <__divmodsi4_exit>

00002b18 <__divmodsi4_neg2>:
    2b18:	50 95       	com	r21
    2b1a:	40 95       	com	r20
    2b1c:	30 95       	com	r19
    2b1e:	21 95       	neg	r18
    2b20:	3f 4f       	sbci	r19, 0xFF	; 255
    2b22:	4f 4f       	sbci	r20, 0xFF	; 255
    2b24:	5f 4f       	sbci	r21, 0xFF	; 255

00002b26 <__divmodsi4_exit>:
    2b26:	08 95       	ret

00002b28 <__divmodsi4_neg1>:
    2b28:	f6 f7       	brtc	.-4      	; 0x2b26 <__divmodsi4_exit>
    2b2a:	90 95       	com	r25
    2b2c:	80 95       	com	r24
    2b2e:	70 95       	com	r23
    2b30:	61 95       	neg	r22
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	8f 4f       	sbci	r24, 0xFF	; 255
    2b36:	9f 4f       	sbci	r25, 0xFF	; 255
    2b38:	08 95       	ret

00002b3a <__udivmodsi4>:
    2b3a:	a1 e2       	ldi	r26, 0x21	; 33
    2b3c:	1a 2e       	mov	r1, r26
    2b3e:	aa 1b       	sub	r26, r26
    2b40:	bb 1b       	sub	r27, r27
    2b42:	fd 01       	movw	r30, r26
    2b44:	0d c0       	rjmp	.+26     	; 0x2b60 <__udivmodsi4_ep>

00002b46 <__udivmodsi4_loop>:
    2b46:	aa 1f       	adc	r26, r26
    2b48:	bb 1f       	adc	r27, r27
    2b4a:	ee 1f       	adc	r30, r30
    2b4c:	ff 1f       	adc	r31, r31
    2b4e:	a2 17       	cp	r26, r18
    2b50:	b3 07       	cpc	r27, r19
    2b52:	e4 07       	cpc	r30, r20
    2b54:	f5 07       	cpc	r31, r21
    2b56:	20 f0       	brcs	.+8      	; 0x2b60 <__udivmodsi4_ep>
    2b58:	a2 1b       	sub	r26, r18
    2b5a:	b3 0b       	sbc	r27, r19
    2b5c:	e4 0b       	sbc	r30, r20
    2b5e:	f5 0b       	sbc	r31, r21

00002b60 <__udivmodsi4_ep>:
    2b60:	66 1f       	adc	r22, r22
    2b62:	77 1f       	adc	r23, r23
    2b64:	88 1f       	adc	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	1a 94       	dec	r1
    2b6a:	69 f7       	brne	.-38     	; 0x2b46 <__udivmodsi4_loop>
    2b6c:	60 95       	com	r22
    2b6e:	70 95       	com	r23
    2b70:	80 95       	com	r24
    2b72:	90 95       	com	r25
    2b74:	9b 01       	movw	r18, r22
    2b76:	ac 01       	movw	r20, r24
    2b78:	bd 01       	movw	r22, r26
    2b7a:	cf 01       	movw	r24, r30
    2b7c:	08 95       	ret

00002b7e <__prologue_saves__>:
    2b7e:	2f 92       	push	r2
    2b80:	3f 92       	push	r3
    2b82:	4f 92       	push	r4
    2b84:	5f 92       	push	r5
    2b86:	6f 92       	push	r6
    2b88:	7f 92       	push	r7
    2b8a:	8f 92       	push	r8
    2b8c:	9f 92       	push	r9
    2b8e:	af 92       	push	r10
    2b90:	bf 92       	push	r11
    2b92:	cf 92       	push	r12
    2b94:	df 92       	push	r13
    2b96:	ef 92       	push	r14
    2b98:	ff 92       	push	r15
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	ca 1b       	sub	r28, r26
    2ba8:	db 0b       	sbc	r29, r27
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	09 94       	ijmp

00002bb6 <__epilogue_restores__>:
    2bb6:	2a 88       	ldd	r2, Y+18	; 0x12
    2bb8:	39 88       	ldd	r3, Y+17	; 0x11
    2bba:	48 88       	ldd	r4, Y+16	; 0x10
    2bbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bc8:	b9 84       	ldd	r11, Y+9	; 0x09
    2bca:	c8 84       	ldd	r12, Y+8	; 0x08
    2bcc:	df 80       	ldd	r13, Y+7	; 0x07
    2bce:	ee 80       	ldd	r14, Y+6	; 0x06
    2bd0:	fd 80       	ldd	r15, Y+5	; 0x05
    2bd2:	0c 81       	ldd	r16, Y+4	; 0x04
    2bd4:	1b 81       	ldd	r17, Y+3	; 0x03
    2bd6:	aa 81       	ldd	r26, Y+2	; 0x02
    2bd8:	b9 81       	ldd	r27, Y+1	; 0x01
    2bda:	ce 0f       	add	r28, r30
    2bdc:	d1 1d       	adc	r29, r1
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	ed 01       	movw	r28, r26
    2bea:	08 95       	ret

00002bec <memset>:
    2bec:	dc 01       	movw	r26, r24
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <memset+0x6>
    2bf0:	6d 93       	st	X+, r22
    2bf2:	41 50       	subi	r20, 0x01	; 1
    2bf4:	50 40       	sbci	r21, 0x00	; 0
    2bf6:	e0 f7       	brcc	.-8      	; 0x2bf0 <memset+0x4>
    2bf8:	08 95       	ret

00002bfa <_exit>:
    2bfa:	f8 94       	cli

00002bfc <__stop_program>:
    2bfc:	ff cf       	rjmp	.-2      	; 0x2bfc <__stop_program>
